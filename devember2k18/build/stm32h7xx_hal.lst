ARM GAS  /tmp/ccEZ6zfz.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32h7xx_hal.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.HAL_MspInit,"ax",%progbits
  17              		.align	1
  18              		.weak	HAL_MspInit
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	HAL_MspInit:
  26              	.LFB139:
  27              		.file 1 "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c"
   1:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
   2:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   ******************************************************************************
   3:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @file    stm32h7xx_hal.c
   4:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @author  MCD Application Team
   5:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief   HAL module driver.
   6:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *          This is the common part of the HAL initialization
   7:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *
   8:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   @verbatim
   9:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   ==============================================================================
  10:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****                      ##### How to use this driver #####
  11:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   ==============================================================================
  12:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     [..]
  13:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     The common HAL driver contains a set of generic and common APIs that can be
  14:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     used by the PPP peripheral drivers and the user to start using the HAL.
  15:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     [..]
  16:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     The HAL contains two APIs' categories:
  17:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****          (+) Common HAL APIs
  18:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****          (+) Services HAL APIs
  19:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  20:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   @endverbatim
  21:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   ******************************************************************************
  22:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @attention
  23:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *
  24:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  25:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *
  26:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * Redistribution and use in source and binary forms, with or without modification,
  27:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * are permitted provided that the following conditions are met:
  28:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  29:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *      this list of conditions and the following disclaimer.
  30:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  31:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *      this list of conditions and the following disclaimer in the documentation
ARM GAS  /tmp/ccEZ6zfz.s 			page 2


  32:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *      and/or other materials provided with the distribution.
  33:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  34:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *      may be used to endorse or promote products derived from this software
  35:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *      without specific prior written permission.
  36:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *
  37:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  38:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  39:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  40:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  41:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  42:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  43:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  44:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  45:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  46:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  47:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *
  48:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   ******************************************************************************
  49:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
  50:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  51:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /* Includes ------------------------------------------------------------------*/
  52:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** #include "stm32h7xx_hal.h"
  53:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  54:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /** @addtogroup STM32H7xx_HAL_Driver
  55:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @{
  56:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
  57:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  58:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /** @defgroup HAL  HAL
  59:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief HAL module driver.
  60:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @{
  61:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
  62:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  63:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /* Private typedef -----------------------------------------------------------*/
  64:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /* Private define ------------------------------------------------------------*/
  65:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
  66:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  * @brief STM32H7xx HAL Driver version number V1.3.0
  67:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****    */
  68:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** #define __STM32H7xx_HAL_VERSION_MAIN   (0x01) /*!< [31:24] main version */
  69:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** #define __STM32H7xx_HAL_VERSION_SUB1   (0x03) /*!< [23:16] sub1 version */
  70:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** #define __STM32H7xx_HAL_VERSION_SUB2   (0x00) /*!< [15:8]  sub2 version */
  71:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** #define __STM32H7xx_HAL_VERSION_RC     (0x00) /*!< [7:0]  release candidate */
  72:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** #define __STM32H7xx_HAL_VERSION         ((__STM32H7xx_HAL_VERSION_MAIN << 24)\
  73:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****                                         |(__STM32H7xx_HAL_VERSION_SUB1 << 16)\
  74:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****                                         |(__STM32H7xx_HAL_VERSION_SUB2 << 8 )\
  75:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****                                         |(__STM32H7xx_HAL_VERSION_RC))
  76:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  77:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** #define IDCODE_DEVID_MASK    ((uint32_t)0x00000FFF)
  78:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** #define VREFBUF_TIMEOUT_VALUE     (uint32_t)10   /* 10 ms  */
  79:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  80:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /* Private macro -------------------------------------------------------------*/
  81:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /* Private variables ---------------------------------------------------------*/
  82:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** static __IO uint32_t uwTick;
  83:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** static uint32_t uwTickPrio   = (1UL << __NVIC_PRIO_BITS); /* Invalid PRIO */
  84:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** static HAL_TickFreqTypeDef uwTickFreq = HAL_TICK_FREQ_DEFAULT;  /* 1KHz */
  85:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  86:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /* Private function prototypes -----------------------------------------------*/
  87:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /* Private functions ---------------------------------------------------------*/
  88:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
ARM GAS  /tmp/ccEZ6zfz.s 			page 3


  89:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /** @defgroup HAL_Private_Functions  HAL Private Functions
  90:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @{
  91:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
  92:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  93:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /** @defgroup HAL_Group1 Initialization and de-initialization Functions
  94:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  *  @brief    Initialization and de-initialization functions
  95:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  *
  96:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** @verbatim
  97:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  ===============================================================================
  98:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****               ##### Initialization and de-initialization functions #####
  99:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  ===============================================================================
 100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     [..]  This section provides functions allowing to:
 101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) Initializes the Flash interface the NVIC allocation and initial clock
 102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****           configuration. It initializes the systick also when timeout is needed
 103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****           and the backup domain when enabled.
 104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) De-Initializes common part of the HAL.
 105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) Configure The time base source to have 1ms time base with a dedicated
 106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****           Tick interrupt priority.
 107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****         (++) SysTick timer is used by default as source of time base, but user
 108:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****              can eventually implement his proper time base source (a general purpose
 109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****              timer for example or other time source), keeping in mind that Time base
 110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****              duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
 111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****              handled in milliseconds basis.
 112:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****         (++) Time base configuration function (HAL_InitTick ()) is called automatically
 113:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****              at the beginning of the program after reset by HAL_Init() or at any time
 114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****              when clock is configured, by HAL_RCC_ClockConfig().
 115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****         (++) Source of time base is configured  to generate interrupts at regular
 116:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****              time intervals. Care must be taken if HAL_Delay() is called from a
 117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****              peripheral ISR process, the Tick interrupt line must have higher priority
 118:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****             (numerically lower) than the peripheral interrupt. Otherwise the caller
 119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****             ISR process will be blocked.
 120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****        (++) functions affecting time base configurations are declared as __weak
 121:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****              to make  override possible  in case of other  implementations in user file.
 122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** @endverbatim
 123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @{
 124:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 125:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  This function is used to initialize the HAL Library; it must be the first
 128:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         instruction to be executed in the main program (before to call any other
 129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         HAL function), it performs the following:
 130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *           Configures the SysTick to generate an interrupt each 1 millisecond,
 131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *           which is clocked by the HSI (at this stage, the clock is not yet
 132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *           configured and thus the system is running from the internal HSI at 16 MHz).
 133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *           Set NVIC Group Priority to 4.
 134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *           Calls the HAL_MspInit() callback function defined in user file
 135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *           "stm32h7xx_hal_msp.c" to do the global low level hardware initialization
 136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *
 137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note   SysTick is used as time base for the HAL_Delay() function, the application
 138:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         need to ensure that the SysTick time base is always set to 1 millisecond
 139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         to have correct HAL operation.
 140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval HAL status
 141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** HAL_StatusTypeDef HAL_Init(void)
 143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Set Interrupt Group Priority */
 145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
ARM GAS  /tmp/ccEZ6zfz.s 			page 4


 146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
 148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     return HAL_ERROR;
 151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Init the low level hardware */
 154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   HAL_MspInit();
 155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Return function status */
 157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   return HAL_OK;
 158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 160:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  This function de-Initializes common part of the HAL and stops the systick.
 162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         This function is optional.
 163:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval HAL status
 164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** HAL_StatusTypeDef HAL_DeInit(void)
 166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Reset of all peripherals */
 168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_AHB3_FORCE_RESET();
 169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_AHB3_RELEASE_RESET();
 170:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_AHB1_FORCE_RESET();
 172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_AHB1_RELEASE_RESET();
 173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_AHB2_FORCE_RESET();
 175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_AHB2_RELEASE_RESET();
 176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_AHB4_FORCE_RESET();
 178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  __HAL_RCC_AHB4_RELEASE_RESET();
 179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_APB3_FORCE_RESET();
 181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_APB3_RELEASE_RESET();
 182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_APB1L_FORCE_RESET();
 184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_APB1L_RELEASE_RESET();
 185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_APB1H_FORCE_RESET();
 187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_APB1H_RELEASE_RESET();
 188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****    __HAL_RCC_APB2_FORCE_RESET();
 190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****    __HAL_RCC_APB2_RELEASE_RESET();
 191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_APB4_FORCE_RESET();
 193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_APB4_RELEASE_RESET();
 194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* De-Init the low level hardware */
 196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   HAL_MspDeInit();
 197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 198:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Return function status */
 199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   return HAL_OK;
 200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
ARM GAS  /tmp/ccEZ6zfz.s 			page 5


 203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Initializes the MSP.
 204:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** __weak void HAL_MspInit(void)
 207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
  28              		.loc 1 207 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****             the HAL_MspInit could be implemented in the user file
 210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****    */
 211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
  33              		.loc 1 211 1 view .LVU1
  34 0000 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE139:
  38              		.section	.text.HAL_MspDeInit,"ax",%progbits
  39              		.align	1
  40              		.weak	HAL_MspDeInit
  41              		.syntax unified
  42              		.thumb
  43              		.thumb_func
  44              		.fpu fpv5-d16
  46              	HAL_MspDeInit:
  47              	.LFB140:
 212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  DeInitializes the MSP.
 215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** __weak void HAL_MspDeInit(void)
 218:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
  48              		.loc 1 218 1 view -0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              		@ link register save eliminated.
 219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****             the HAL_MspDeInit could be implemented in the user file
 221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****    */
 222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
  53              		.loc 1 222 1 view .LVU3
  54 0000 7047     		bx	lr
  55              		.cfi_endproc
  56              	.LFE140:
  58              		.section	.text.HAL_DeInit,"ax",%progbits
  59              		.align	1
  60              		.global	HAL_DeInit
  61              		.syntax unified
  62              		.thumb
  63              		.thumb_func
  64              		.fpu fpv5-d16
  66              	HAL_DeInit:
  67              	.LFB138:
 166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Reset of all peripherals */
ARM GAS  /tmp/ccEZ6zfz.s 			page 6


  68              		.loc 1 166 1 view -0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72 0000 10B5     		push	{r4, lr}
  73              	.LCFI0:
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 4, -8
  76              		.cfi_offset 14, -4
 168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_AHB3_RELEASE_RESET();
  77              		.loc 1 168 3 view .LVU5
  78 0002 154B     		ldr	r3, .L5
  79 0004 4FF0FF32 		mov	r2, #-1
  80 0008 DA67     		str	r2, [r3, #124]
 169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  81              		.loc 1 169 3 view .LVU6
  82 000a 0024     		movs	r4, #0
  83 000c DC67     		str	r4, [r3, #124]
 171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_AHB1_RELEASE_RESET();
  84              		.loc 1 171 3 view .LVU7
  85 000e C3F88020 		str	r2, [r3, #128]
 172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  86              		.loc 1 172 3 view .LVU8
  87 0012 C3F88040 		str	r4, [r3, #128]
 174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_AHB2_RELEASE_RESET();
  88              		.loc 1 174 3 view .LVU9
  89 0016 C3F88420 		str	r2, [r3, #132]
 175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  90              		.loc 1 175 3 view .LVU10
  91 001a C3F88440 		str	r4, [r3, #132]
 177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  __HAL_RCC_AHB4_RELEASE_RESET();
  92              		.loc 1 177 3 view .LVU11
  93 001e C3F88820 		str	r2, [r3, #136]
 178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  94              		.loc 1 178 2 view .LVU12
  95 0022 C3F88840 		str	r4, [r3, #136]
 180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_APB3_RELEASE_RESET();
  96              		.loc 1 180 3 view .LVU13
  97 0026 C3F88C20 		str	r2, [r3, #140]
 181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
  98              		.loc 1 181 3 view .LVU14
  99 002a C3F88C40 		str	r4, [r3, #140]
 183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_APB1L_RELEASE_RESET();
 100              		.loc 1 183 3 view .LVU15
 101 002e C3F89020 		str	r2, [r3, #144]
 184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 102              		.loc 1 184 3 view .LVU16
 103 0032 C3F89040 		str	r4, [r3, #144]
 186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_APB1H_RELEASE_RESET();
 104              		.loc 1 186 3 view .LVU17
 105 0036 C3F89420 		str	r2, [r3, #148]
 187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 106              		.loc 1 187 3 view .LVU18
 107 003a C3F89440 		str	r4, [r3, #148]
 189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****    __HAL_RCC_APB2_RELEASE_RESET();
 108              		.loc 1 189 4 view .LVU19
 109 003e C3F89820 		str	r2, [r3, #152]
ARM GAS  /tmp/ccEZ6zfz.s 			page 7


 190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 110              		.loc 1 190 4 view .LVU20
 111 0042 C3F89840 		str	r4, [r3, #152]
 192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   __HAL_RCC_APB4_RELEASE_RESET();
 112              		.loc 1 192 3 view .LVU21
 113 0046 C3F89C20 		str	r2, [r3, #156]
 193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 114              		.loc 1 193 3 view .LVU22
 115 004a C3F89C40 		str	r4, [r3, #156]
 196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 116              		.loc 1 196 3 view .LVU23
 117 004e FFF7FEFF 		bl	HAL_MspDeInit
 118              	.LVL0:
 199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 119              		.loc 1 199 3 view .LVU24
 200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 120              		.loc 1 200 1 is_stmt 0 view .LVU25
 121 0052 2046     		mov	r0, r4
 122 0054 10BD     		pop	{r4, pc}
 123              	.L6:
 124 0056 00BF     		.align	2
 125              	.L5:
 126 0058 00440258 		.word	1476543488
 127              		.cfi_endproc
 128              	.LFE138:
 130              		.section	.text.HAL_InitTick,"ax",%progbits
 131              		.align	1
 132              		.weak	HAL_InitTick
 133              		.syntax unified
 134              		.thumb
 135              		.thumb_func
 136              		.fpu fpv5-d16
 138              	HAL_InitTick:
 139              	.LVL1:
 140              	.LFB141:
 223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief This function configures the source of the time base.
 226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *        The time source is configured  to have 1ms time base with a dedicated
 227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *        Tick interrupt priority.
 228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note This function is called  automatically at the beginning of program after
 229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       reset by HAL_Init() or at any time when clock is reconfigured  by HAL_RCC_ClockConfig().
 230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note In the default implementation, SysTick timer is the source of time base.
 231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       It is used to generate interrupts at regular time intervals.
 232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       Care must be taken if HAL_Delay() is called from a peripheral ISR process,
 233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       The the SysTick interrupt must have higher priority (numerically lower)
 234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
 235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       The function is declared as __weak  to be overwritten  in case of other
 236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       implementation  in user file.
 237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param TickPriority: Tick interrupt priority.
 238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval HAL status
 239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** __weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 141              		.loc 1 241 1 is_stmt 1 view -0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccEZ6zfz.s 			page 8


 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145              		.loc 1 241 1 is_stmt 0 view .LVU27
 146 0000 10B5     		push	{r4, lr}
 147              	.LCFI1:
 148              		.cfi_def_cfa_offset 8
 149              		.cfi_offset 4, -8
 150              		.cfi_offset 14, -4
 151 0002 0446     		mov	r4, r0
 242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Configure the SysTick to have interrupt in 1ms time basis*/
 243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 152              		.loc 1 243 3 is_stmt 1 view .LVU28
 153              		.loc 1 243 51 is_stmt 0 view .LVU29
 154 0004 0E4B     		ldr	r3, .L13
 155 0006 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 156              	.LVL2:
 157              		.loc 1 243 51 view .LVU30
 158 0008 4FF47A73 		mov	r3, #1000
 159 000c B3FBF0F3 		udiv	r3, r3, r0
 160              		.loc 1 243 7 view .LVU31
 161 0010 0C4A     		ldr	r2, .L13+4
 162 0012 1068     		ldr	r0, [r2]
 163 0014 B0FBF3F0 		udiv	r0, r0, r3
 164 0018 FFF7FEFF 		bl	HAL_SYSTICK_Config
 165              	.LVL3:
 166              		.loc 1 243 6 view .LVU32
 167 001c 68B9     		cbnz	r0, .L9
 244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     return HAL_ERROR;
 246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Configure the SysTick IRQ priority */
 249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 168              		.loc 1 249 3 is_stmt 1 view .LVU33
 169              		.loc 1 249 6 is_stmt 0 view .LVU34
 170 001e 0F2C     		cmp	r4, #15
 171 0020 01D9     		bls	.L12
 250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     uwTickPrio = TickPriority;
 253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   else
 255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     return HAL_ERROR;
 172              		.loc 1 256 12 view .LVU35
 173 0022 0120     		movs	r0, #1
 174 0024 0AE0     		b	.L8
 175              	.L12:
 251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     uwTickPrio = TickPriority;
 176              		.loc 1 251 5 is_stmt 1 view .LVU36
 177 0026 0022     		movs	r2, #0
 178 0028 2146     		mov	r1, r4
 179 002a 4FF0FF30 		mov	r0, #-1
 180 002e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 181              	.LVL4:
 252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 182              		.loc 1 252 5 view .LVU37
 252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
ARM GAS  /tmp/ccEZ6zfz.s 			page 9


 183              		.loc 1 252 16 is_stmt 0 view .LVU38
 184 0032 054B     		ldr	r3, .L13+8
 185 0034 1C60     		str	r4, [r3]
 257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Return function status */
 260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   return HAL_OK;
 186              		.loc 1 260 3 is_stmt 1 view .LVU39
 187              		.loc 1 260 10 is_stmt 0 view .LVU40
 188 0036 0020     		movs	r0, #0
 189 0038 00E0     		b	.L8
 190              	.L9:
 245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 191              		.loc 1 245 12 view .LVU41
 192 003a 0120     		movs	r0, #1
 193              	.L8:
 261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 194              		.loc 1 261 1 view .LVU42
 195 003c 10BD     		pop	{r4, pc}
 196              	.LVL5:
 197              	.L14:
 198              		.loc 1 261 1 view .LVU43
 199 003e 00BF     		.align	2
 200              	.L13:
 201 0040 00000000 		.word	.LANCHOR0
 202 0044 00000000 		.word	SystemCoreClock
 203 0048 00000000 		.word	.LANCHOR1
 204              		.cfi_endproc
 205              	.LFE141:
 207              		.section	.text.HAL_Init,"ax",%progbits
 208              		.align	1
 209              		.global	HAL_Init
 210              		.syntax unified
 211              		.thumb
 212              		.thumb_func
 213              		.fpu fpv5-d16
 215              	HAL_Init:
 216              	.LFB137:
 143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Set Interrupt Group Priority */
 217              		.loc 1 143 1 is_stmt 1 view -0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 0, uses_anonymous_args = 0
 221 0000 10B5     		push	{r4, lr}
 222              	.LCFI2:
 223              		.cfi_def_cfa_offset 8
 224              		.cfi_offset 4, -8
 225              		.cfi_offset 14, -4
 145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 226              		.loc 1 145 3 view .LVU45
 227 0002 0320     		movs	r0, #3
 228 0004 FFF7FEFF 		bl	HAL_NVIC_SetPriorityGrouping
 229              	.LVL6:
 148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 230              		.loc 1 148 3 view .LVU46
 148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 231              		.loc 1 148 6 is_stmt 0 view .LVU47
ARM GAS  /tmp/ccEZ6zfz.s 			page 10


 232 0008 0020     		movs	r0, #0
 233 000a FFF7FEFF 		bl	HAL_InitTick
 234              	.LVL7:
 148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 235              		.loc 1 148 5 view .LVU48
 236 000e 10B1     		cbz	r0, .L19
 150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 237              		.loc 1 150 12 view .LVU49
 238 0010 0124     		movs	r4, #1
 239              	.L16:
 158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 240              		.loc 1 158 1 view .LVU50
 241 0012 2046     		mov	r0, r4
 242 0014 10BD     		pop	{r4, pc}
 243              	.L19:
 244 0016 0446     		mov	r4, r0
 154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 245              		.loc 1 154 3 is_stmt 1 view .LVU51
 246 0018 FFF7FEFF 		bl	HAL_MspInit
 247              	.LVL8:
 157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 248              		.loc 1 157 3 view .LVU52
 157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 249              		.loc 1 157 10 is_stmt 0 view .LVU53
 250 001c F9E7     		b	.L16
 251              		.cfi_endproc
 252              	.LFE137:
 254              		.section	.text.HAL_IncTick,"ax",%progbits
 255              		.align	1
 256              		.weak	HAL_IncTick
 257              		.syntax unified
 258              		.thumb
 259              		.thumb_func
 260              		.fpu fpv5-d16
 262              	HAL_IncTick:
 263              	.LFB142:
 262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @}
 265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /** @defgroup HAL_Group2 HAL Control functions
 268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  *  @brief    HAL Control functions
 269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  *
 270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** @verbatim
 271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  ===============================================================================
 272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****                       ##### HAL Control functions #####
 273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  ===============================================================================
 274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     [..]  This section provides functions allowing to:
 275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) Provide a tick value in millisecond
 276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) Provide a blocking delay in millisecond
 277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) Suspend the time base source interrupt
 278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) Resume the time base source interrupt
 279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) Get the HAL API driver version
 280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) Get the device identifier
 281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) Get the device revision identifier
 282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) Enable/Disable Debug module during SLEEP mode
ARM GAS  /tmp/ccEZ6zfz.s 			page 11


 283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) Enable/Disable Debug module during STOP mode
 284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       (+) Enable/Disable Debug module during STANDBY mode
 285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** @endverbatim
 287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @{
 288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief This function is called to increment  a global variable "uwTick"
 292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *        used as application time base.
 293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note In the default implementation, this variable is incremented each 1ms
 294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       in Systick ISR.
 295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  * @note This function is declared as __weak to be overwritten in case of other
 296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *      implementations in user file.
 297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** __weak void HAL_IncTick(void)
 300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 264              		.loc 1 300 1 is_stmt 1 view -0
 265              		.cfi_startproc
 266              		@ args = 0, pretend = 0, frame = 0
 267              		@ frame_needed = 0, uses_anonymous_args = 0
 268              		@ link register save eliminated.
 301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   uwTick += (uint32_t)uwTickFreq;
 269              		.loc 1 301 3 view .LVU55
 270              		.loc 1 301 13 is_stmt 0 view .LVU56
 271 0000 034B     		ldr	r3, .L21
 272 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 273              		.loc 1 301 10 view .LVU57
 274 0004 034A     		ldr	r2, .L21+4
 275 0006 1168     		ldr	r1, [r2]
 276 0008 0B44     		add	r3, r3, r1
 277 000a 1360     		str	r3, [r2]
 302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 278              		.loc 1 302 1 view .LVU58
 279 000c 7047     		bx	lr
 280              	.L22:
 281 000e 00BF     		.align	2
 282              	.L21:
 283 0010 00000000 		.word	.LANCHOR0
 284 0014 00000000 		.word	.LANCHOR2
 285              		.cfi_endproc
 286              	.LFE142:
 288              		.section	.text.HAL_GetTick,"ax",%progbits
 289              		.align	1
 290              		.weak	HAL_GetTick
 291              		.syntax unified
 292              		.thumb
 293              		.thumb_func
 294              		.fpu fpv5-d16
 296              	HAL_GetTick:
 297              	.LFB143:
 303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief Provides a tick value in millisecond.
 306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       implementations in user file.
ARM GAS  /tmp/ccEZ6zfz.s 			page 12


 308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval tick value
 309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** __weak uint32_t HAL_GetTick(void)
 311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 298              		.loc 1 311 1 is_stmt 1 view -0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 0
 301              		@ frame_needed = 0, uses_anonymous_args = 0
 302              		@ link register save eliminated.
 312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   return uwTick;
 303              		.loc 1 312 3 view .LVU60
 304              		.loc 1 312 10 is_stmt 0 view .LVU61
 305 0000 014B     		ldr	r3, .L24
 306 0002 1868     		ldr	r0, [r3]
 313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 307              		.loc 1 313 1 view .LVU62
 308 0004 7047     		bx	lr
 309              	.L25:
 310 0006 00BF     		.align	2
 311              	.L24:
 312 0008 00000000 		.word	.LANCHOR2
 313              		.cfi_endproc
 314              	.LFE143:
 316              		.section	.text.HAL_GetTickPrio,"ax",%progbits
 317              		.align	1
 318              		.global	HAL_GetTickPrio
 319              		.syntax unified
 320              		.thumb
 321              		.thumb_func
 322              		.fpu fpv5-d16
 324              	HAL_GetTickPrio:
 325              	.LFB144:
 314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief This function returns a tick priority.
 317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval tick priority
 318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** uint32_t HAL_GetTickPrio(void)
 320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 326              		.loc 1 320 1 is_stmt 1 view -0
 327              		.cfi_startproc
 328              		@ args = 0, pretend = 0, frame = 0
 329              		@ frame_needed = 0, uses_anonymous_args = 0
 330              		@ link register save eliminated.
 321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   return uwTickPrio;
 331              		.loc 1 321 3 view .LVU64
 322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 332              		.loc 1 322 1 is_stmt 0 view .LVU65
 333 0000 014B     		ldr	r3, .L27
 334 0002 1868     		ldr	r0, [r3]
 335 0004 7047     		bx	lr
 336              	.L28:
 337 0006 00BF     		.align	2
 338              	.L27:
 339 0008 00000000 		.word	.LANCHOR1
 340              		.cfi_endproc
 341              	.LFE144:
ARM GAS  /tmp/ccEZ6zfz.s 			page 13


 343              		.section	.text.HAL_SetTickFreq,"ax",%progbits
 344              		.align	1
 345              		.global	HAL_SetTickFreq
 346              		.syntax unified
 347              		.thumb
 348              		.thumb_func
 349              		.fpu fpv5-d16
 351              	HAL_SetTickFreq:
 352              	.LVL9:
 353              	.LFB145:
 323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief Set new tick Freq.
 326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval Status
 327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
 329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 354              		.loc 1 329 1 is_stmt 1 view -0
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 0
 357              		@ frame_needed = 0, uses_anonymous_args = 0
 358              		.loc 1 329 1 is_stmt 0 view .LVU67
 359 0000 08B5     		push	{r3, lr}
 360              	.LCFI3:
 361              		.cfi_def_cfa_offset 8
 362              		.cfi_offset 3, -8
 363              		.cfi_offset 14, -4
 330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   HAL_StatusTypeDef status  = HAL_OK;
 364              		.loc 1 330 3 is_stmt 1 view .LVU68
 365              	.LVL10:
 331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_TICKFREQ(Freq));
 366              		.loc 1 331 3 view .LVU69
 332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   if (uwTickFreq != Freq)
 367              		.loc 1 333 3 view .LVU70
 368              		.loc 1 333 18 is_stmt 0 view .LVU71
 369 0002 064B     		ldr	r3, .L34
 370 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 371              		.loc 1 333 6 view .LVU72
 372 0006 8342     		cmp	r3, r0
 373 0008 01D1     		bne	.L33
 330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_TICKFREQ(Freq));
 374              		.loc 1 330 21 view .LVU73
 375 000a 0020     		movs	r0, #0
 376              	.LVL11:
 377              	.L30:
 334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     uwTickFreq = Freq;
 336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     /* Apply the new tick Freq  */
 338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     status = HAL_InitTick(uwTickPrio);
 339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   return status;
 378              		.loc 1 341 3 is_stmt 1 view .LVU74
 342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 379              		.loc 1 342 1 is_stmt 0 view .LVU75
ARM GAS  /tmp/ccEZ6zfz.s 			page 14


 380 000c 08BD     		pop	{r3, pc}
 381              	.LVL12:
 382              	.L33:
 335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 383              		.loc 1 335 5 is_stmt 1 view .LVU76
 335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 384              		.loc 1 335 16 is_stmt 0 view .LVU77
 385 000e 034B     		ldr	r3, .L34
 386 0010 1870     		strb	r0, [r3]
 338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 387              		.loc 1 338 5 is_stmt 1 view .LVU78
 338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 388              		.loc 1 338 14 is_stmt 0 view .LVU79
 389 0012 034B     		ldr	r3, .L34+4
 390 0014 1868     		ldr	r0, [r3]
 391              	.LVL13:
 338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 392              		.loc 1 338 14 view .LVU80
 393 0016 FFF7FEFF 		bl	HAL_InitTick
 394              	.LVL14:
 338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 395              		.loc 1 338 14 view .LVU81
 396 001a F7E7     		b	.L30
 397              	.L35:
 398              		.align	2
 399              	.L34:
 400 001c 00000000 		.word	.LANCHOR0
 401 0020 00000000 		.word	.LANCHOR1
 402              		.cfi_endproc
 403              	.LFE145:
 405              		.section	.text.HAL_GetTickFreq,"ax",%progbits
 406              		.align	1
 407              		.global	HAL_GetTickFreq
 408              		.syntax unified
 409              		.thumb
 410              		.thumb_func
 411              		.fpu fpv5-d16
 413              	HAL_GetTickFreq:
 414              	.LFB146:
 343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief Return tick frequency.
 346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval tick period in Hz
 347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** HAL_TickFreqTypeDef HAL_GetTickFreq(void)
 349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 415              		.loc 1 349 1 is_stmt 1 view -0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 0
 418              		@ frame_needed = 0, uses_anonymous_args = 0
 419              		@ link register save eliminated.
 350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   return uwTickFreq;
 420              		.loc 1 350 3 view .LVU83
 351:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 421              		.loc 1 351 1 is_stmt 0 view .LVU84
 422 0000 014B     		ldr	r3, .L37
 423 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccEZ6zfz.s 			page 15


 424 0004 7047     		bx	lr
 425              	.L38:
 426 0006 00BF     		.align	2
 427              	.L37:
 428 0008 00000000 		.word	.LANCHOR0
 429              		.cfi_endproc
 430              	.LFE146:
 432              		.section	.text.HAL_Delay,"ax",%progbits
 433              		.align	1
 434              		.weak	HAL_Delay
 435              		.syntax unified
 436              		.thumb
 437              		.thumb_func
 438              		.fpu fpv5-d16
 440              	HAL_Delay:
 441              	.LVL15:
 442              	.LFB147:
 352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief This function provides minimum delay (in milliseconds) based
 355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *        on variable incremented.
 356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base.
 357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       It is used to generate interrupts at regular time intervals where uwTick
 358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       is incremented.
 359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 360:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       implementations in user file.
 361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param Delay  specifies the delay time length, in milliseconds.
 362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** __weak void HAL_Delay(uint32_t Delay)
 365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 443              		.loc 1 365 1 is_stmt 1 view -0
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 0
 446              		@ frame_needed = 0, uses_anonymous_args = 0
 447              		.loc 1 365 1 is_stmt 0 view .LVU86
 448 0000 38B5     		push	{r3, r4, r5, lr}
 449              	.LCFI4:
 450              		.cfi_def_cfa_offset 16
 451              		.cfi_offset 3, -16
 452              		.cfi_offset 4, -12
 453              		.cfi_offset 5, -8
 454              		.cfi_offset 14, -4
 455 0002 0446     		mov	r4, r0
 366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   uint32_t tickstart = HAL_GetTick();
 456              		.loc 1 366 3 is_stmt 1 view .LVU87
 457              		.loc 1 366 24 is_stmt 0 view .LVU88
 458 0004 FFF7FEFF 		bl	HAL_GetTick
 459              	.LVL16:
 460              		.loc 1 366 24 view .LVU89
 461 0008 0546     		mov	r5, r0
 462              	.LVL17:
 367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   uint32_t wait = Delay;
 463              		.loc 1 367 3 is_stmt 1 view .LVU90
 368:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Add a freq to guarantee minimum wait */
 370:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   if (wait < HAL_MAX_DELAY)
ARM GAS  /tmp/ccEZ6zfz.s 			page 16


 464              		.loc 1 370 3 view .LVU91
 465              		.loc 1 370 6 is_stmt 0 view .LVU92
 466 000a B4F1FF3F 		cmp	r4, #-1
 467 000e 02D0     		beq	.L41
 371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     wait += (uint32_t)(uwTickFreq);
 468              		.loc 1 372 5 is_stmt 1 view .LVU93
 469              		.loc 1 372 13 is_stmt 0 view .LVU94
 470 0010 044B     		ldr	r3, .L43
 471 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 472              		.loc 1 372 10 view .LVU95
 473 0014 1C44     		add	r4, r4, r3
 474              	.LVL18:
 475              	.L41:
 373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   while ((HAL_GetTick() - tickstart) < wait)
 376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 476              		.loc 1 377 3 is_stmt 1 discriminator 1 view .LVU96
 375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 477              		.loc 1 375 11 is_stmt 0 discriminator 1 view .LVU97
 478 0016 FFF7FEFF 		bl	HAL_GetTick
 479              	.LVL19:
 375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 480              		.loc 1 375 25 discriminator 1 view .LVU98
 481 001a 401B     		subs	r0, r0, r5
 375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 482              		.loc 1 375 9 discriminator 1 view .LVU99
 483 001c A042     		cmp	r0, r4
 484 001e FAD3     		bcc	.L41
 378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 485              		.loc 1 378 1 view .LVU100
 486 0020 38BD     		pop	{r3, r4, r5, pc}
 487              	.LVL20:
 488              	.L44:
 489              		.loc 1 378 1 view .LVU101
 490 0022 00BF     		.align	2
 491              	.L43:
 492 0024 00000000 		.word	.LANCHOR0
 493              		.cfi_endproc
 494              	.LFE147:
 496              		.section	.text.HAL_SuspendTick,"ax",%progbits
 497              		.align	1
 498              		.weak	HAL_SuspendTick
 499              		.syntax unified
 500              		.thumb
 501              		.thumb_func
 502              		.fpu fpv5-d16
 504              	HAL_SuspendTick:
 505              	.LFB148:
 379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief Suspend Tick increment.
 382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base. It is
 383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       used to generate interrupts at regular time intervals. Once HAL_SuspendTick()
 384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       is called, the the SysTick interrupt will be disabled and so Tick increment
ARM GAS  /tmp/ccEZ6zfz.s 			page 17


 385:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       is suspended.
 386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       implementations in user file.
 388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** __weak void HAL_SuspendTick(void)
 391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 506              		.loc 1 391 1 is_stmt 1 view -0
 507              		.cfi_startproc
 508              		@ args = 0, pretend = 0, frame = 0
 509              		@ frame_needed = 0, uses_anonymous_args = 0
 510              		@ link register save eliminated.
 392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Disable SysTick Interrupt */
 393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 511              		.loc 1 393 3 view .LVU103
 512              		.loc 1 393 17 is_stmt 0 view .LVU104
 513 0000 024A     		ldr	r2, .L46
 514 0002 1368     		ldr	r3, [r2]
 515 0004 23F00203 		bic	r3, r3, #2
 516 0008 1360     		str	r3, [r2]
 394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 517              		.loc 1 394 1 view .LVU105
 518 000a 7047     		bx	lr
 519              	.L47:
 520              		.align	2
 521              	.L46:
 522 000c 10E000E0 		.word	-536813552
 523              		.cfi_endproc
 524              	.LFE148:
 526              		.section	.text.HAL_ResumeTick,"ax",%progbits
 527              		.align	1
 528              		.weak	HAL_ResumeTick
 529              		.syntax unified
 530              		.thumb
 531              		.thumb_func
 532              		.fpu fpv5-d16
 534              	HAL_ResumeTick:
 535              	.LFB149:
 395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 397:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief Resume Tick increment.
 398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base. It is
 399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       used to generate interrupts at regular time intervals. Once HAL_ResumeTick()
 400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       is called, the the SysTick interrupt will be enabled and so Tick increment
 401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       is resumed.
 402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 403:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *       implementations in user file.
 404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** __weak void HAL_ResumeTick(void)
 407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 536              		.loc 1 407 1 is_stmt 1 view -0
 537              		.cfi_startproc
 538              		@ args = 0, pretend = 0, frame = 0
 539              		@ frame_needed = 0, uses_anonymous_args = 0
 540              		@ link register save eliminated.
 408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Enable SysTick Interrupt */
ARM GAS  /tmp/ccEZ6zfz.s 			page 18


 409:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 541              		.loc 1 409 3 view .LVU107
 542              		.loc 1 409 18 is_stmt 0 view .LVU108
 543 0000 024A     		ldr	r2, .L49
 544 0002 1368     		ldr	r3, [r2]
 545 0004 43F00203 		orr	r3, r3, #2
 546 0008 1360     		str	r3, [r2]
 410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 547              		.loc 1 410 1 view .LVU109
 548 000a 7047     		bx	lr
 549              	.L50:
 550              		.align	2
 551              	.L49:
 552 000c 10E000E0 		.word	-536813552
 553              		.cfi_endproc
 554              	.LFE149:
 556              		.section	.text.HAL_GetHalVersion,"ax",%progbits
 557              		.align	1
 558              		.global	HAL_GetHalVersion
 559              		.syntax unified
 560              		.thumb
 561              		.thumb_func
 562              		.fpu fpv5-d16
 564              	HAL_GetHalVersion:
 565              	.LFB150:
 411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Returns the HAL revision
 414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval version : 0xXYZR (8bits for each decimal, R for RC)
 415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** uint32_t HAL_GetHalVersion(void)
 417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 566              		.loc 1 417 1 is_stmt 1 view -0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 0
 569              		@ frame_needed = 0, uses_anonymous_args = 0
 570              		@ link register save eliminated.
 418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  return __STM32H7xx_HAL_VERSION;
 571              		.loc 1 418 2 view .LVU111
 419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 572              		.loc 1 419 1 is_stmt 0 view .LVU112
 573 0000 0048     		ldr	r0, .L52
 574 0002 7047     		bx	lr
 575              	.L53:
 576              		.align	2
 577              	.L52:
 578 0004 00000301 		.word	16973824
 579              		.cfi_endproc
 580              	.LFE150:
 582              		.section	.text.HAL_GetREVID,"ax",%progbits
 583              		.align	1
 584              		.global	HAL_GetREVID
 585              		.syntax unified
 586              		.thumb
 587              		.thumb_func
 588              		.fpu fpv5-d16
 590              	HAL_GetREVID:
ARM GAS  /tmp/ccEZ6zfz.s 			page 19


 591              	.LFB151:
 420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Returns the device revision identifier.
 423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval Device revision identifier
 424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** uint32_t HAL_GetREVID(void)
 426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 592              		.loc 1 426 1 is_stmt 1 view -0
 593              		.cfi_startproc
 594              		@ args = 0, pretend = 0, frame = 0
 595              		@ frame_needed = 0, uses_anonymous_args = 0
 596              		@ link register save eliminated.
 427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****    return((DBGMCU->IDCODE) >> 16);
 597              		.loc 1 427 4 view .LVU114
 598              		.loc 1 427 18 is_stmt 0 view .LVU115
 599 0000 014B     		ldr	r3, .L55
 600 0002 1868     		ldr	r0, [r3]
 428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 601              		.loc 1 428 1 view .LVU116
 602 0004 000C     		lsrs	r0, r0, #16
 603 0006 7047     		bx	lr
 604              	.L56:
 605              		.align	2
 606              	.L55:
 607 0008 0010005C 		.word	1543507968
 608              		.cfi_endproc
 609              	.LFE151:
 611              		.section	.text.HAL_GetDEVID,"ax",%progbits
 612              		.align	1
 613              		.global	HAL_GetDEVID
 614              		.syntax unified
 615              		.thumb
 616              		.thumb_func
 617              		.fpu fpv5-d16
 619              	HAL_GetDEVID:
 620              	.LFB152:
 429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Returns the device identifier.
 432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval Device identifier
 433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** uint32_t HAL_GetDEVID(void)
 435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 621              		.loc 1 435 1 is_stmt 1 view -0
 622              		.cfi_startproc
 623              		@ args = 0, pretend = 0, frame = 0
 624              		@ frame_needed = 0, uses_anonymous_args = 0
 625              		@ link register save eliminated.
 436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****    return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 626              		.loc 1 436 4 view .LVU118
 627              		.loc 1 436 18 is_stmt 0 view .LVU119
 628 0000 024B     		ldr	r3, .L58
 629 0002 1868     		ldr	r0, [r3]
 437:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 630              		.loc 1 437 1 view .LVU120
 631 0004 C0F30B00 		ubfx	r0, r0, #0, #12
ARM GAS  /tmp/ccEZ6zfz.s 			page 20


 632 0008 7047     		bx	lr
 633              	.L59:
 634 000a 00BF     		.align	2
 635              	.L58:
 636 000c 0010005C 		.word	1543507968
 637              		.cfi_endproc
 638              	.LFE152:
 640              		.section	.text.HAL_SYSCFG_VREFBUF_VoltageScalingConfig,"ax",%progbits
 641              		.align	1
 642              		.global	HAL_SYSCFG_VREFBUF_VoltageScalingConfig
 643              		.syntax unified
 644              		.thumb
 645              		.thumb_func
 646              		.fpu fpv5-d16
 648              	HAL_SYSCFG_VREFBUF_VoltageScalingConfig:
 649              	.LVL21:
 650              	.LFB153:
 438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief Configure the internal voltage reference buffer voltage scale.
 441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param VoltageScaling  specifies the output voltage to achieve
 442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *          This parameter can be one of the following values:
 443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE0: VREF_OUT1 around 2.048 V. 
 444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *                                                This requires VDDA equal to or higher than 2.4 V
 445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE1: VREF_OUT2 around 2.5 V. 
 446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *                                                This requires VDDA equal to or higher than 2.8 V
 447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREF_OUT3 around 1.5 V. 
 448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *                                                This requires VDDA equal to or higher than 1.8 V
 449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.8 V. 
 450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *                                                This requires VDDA equal to or higher than 2.1 V
 451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
 454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 651              		.loc 1 454 1 is_stmt 1 view -0
 652              		.cfi_startproc
 653              		@ args = 0, pretend = 0, frame = 0
 654              		@ frame_needed = 0, uses_anonymous_args = 0
 655              		@ link register save eliminated.
 455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameters */
 456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));
 656              		.loc 1 456 3 view .LVU122
 457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   
 458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 657              		.loc 1 458 3 view .LVU123
 658 0000 034A     		ldr	r2, .L61
 659 0002 1368     		ldr	r3, [r2]
 660 0004 23F07003 		bic	r3, r3, #112
 661 0008 1843     		orrs	r0, r0, r3
 662              	.LVL22:
 663              		.loc 1 458 3 is_stmt 0 view .LVU124
 664 000a 1060     		str	r0, [r2]
 459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 665              		.loc 1 459 1 view .LVU125
 666 000c 7047     		bx	lr
 667              	.L62:
 668 000e 00BF     		.align	2
ARM GAS  /tmp/ccEZ6zfz.s 			page 21


 669              	.L61:
 670 0010 003C0058 		.word	1476410368
 671              		.cfi_endproc
 672              	.LFE153:
 674              		.section	.text.HAL_SYSCFG_VREFBUF_HighImpedanceConfig,"ax",%progbits
 675              		.align	1
 676              		.global	HAL_SYSCFG_VREFBUF_HighImpedanceConfig
 677              		.syntax unified
 678              		.thumb
 679              		.thumb_func
 680              		.fpu fpv5-d16
 682              	HAL_SYSCFG_VREFBUF_HighImpedanceConfig:
 683              	.LVL23:
 684              	.LFB154:
 460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief Configure the internal voltage reference buffer high impedance mode.
 463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param Mode  specifies the high impedance mode
 464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *          This parameter can be one of the following values:
 465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFI
 466:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
 467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 469:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
 470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 685              		.loc 1 470 1 is_stmt 1 view -0
 686              		.cfi_startproc
 687              		@ args = 0, pretend = 0, frame = 0
 688              		@ frame_needed = 0, uses_anonymous_args = 0
 689              		@ link register save eliminated.
 471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameters */
 472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));
 690              		.loc 1 472 3 view .LVU127
 473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   
 474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 691              		.loc 1 474 3 view .LVU128
 692 0000 034A     		ldr	r2, .L64
 693 0002 1368     		ldr	r3, [r2]
 694 0004 23F00203 		bic	r3, r3, #2
 695 0008 1843     		orrs	r0, r0, r3
 696              	.LVL24:
 697              		.loc 1 474 3 is_stmt 0 view .LVU129
 698 000a 1060     		str	r0, [r2]
 475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 699              		.loc 1 475 1 view .LVU130
 700 000c 7047     		bx	lr
 701              	.L65:
 702 000e 00BF     		.align	2
 703              	.L64:
 704 0010 003C0058 		.word	1476410368
 705              		.cfi_endproc
 706              	.LFE154:
 708              		.section	.text.HAL_SYSCFG_VREFBUF_TrimmingConfig,"ax",%progbits
 709              		.align	1
 710              		.global	HAL_SYSCFG_VREFBUF_TrimmingConfig
 711              		.syntax unified
 712              		.thumb
ARM GAS  /tmp/ccEZ6zfz.s 			page 22


 713              		.thumb_func
 714              		.fpu fpv5-d16
 716              	HAL_SYSCFG_VREFBUF_TrimmingConfig:
 717              	.LVL25:
 718              	.LFB155:
 476:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 477:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Tune the Internal Voltage Reference buffer (VREFBUF).
 479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 480:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
 482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 719              		.loc 1 482 1 is_stmt 1 view -0
 720              		.cfi_startproc
 721              		@ args = 0, pretend = 0, frame = 0
 722              		@ frame_needed = 0, uses_anonymous_args = 0
 723              		@ link register save eliminated.
 483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameters */
 484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));
 724              		.loc 1 484 3 view .LVU132
 485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   
 486:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
 725              		.loc 1 486 3 view .LVU133
 726 0000 034A     		ldr	r2, .L67
 727 0002 5368     		ldr	r3, [r2, #4]
 728 0004 23F03F03 		bic	r3, r3, #63
 729 0008 1843     		orrs	r0, r0, r3
 730              	.LVL26:
 731              		.loc 1 486 3 is_stmt 0 view .LVU134
 732 000a 5060     		str	r0, [r2, #4]
 487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 733              		.loc 1 487 1 view .LVU135
 734 000c 7047     		bx	lr
 735              	.L68:
 736 000e 00BF     		.align	2
 737              	.L67:
 738 0010 003C0058 		.word	1476410368
 739              		.cfi_endproc
 740              	.LFE155:
 742              		.section	.text.HAL_SYSCFG_EnableVREFBUF,"ax",%progbits
 743              		.align	1
 744              		.global	HAL_SYSCFG_EnableVREFBUF
 745              		.syntax unified
 746              		.thumb
 747              		.thumb_func
 748              		.fpu fpv5-d16
 750              	HAL_SYSCFG_EnableVREFBUF:
 751              	.LFB156:
 488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 489:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
 491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval HAL_OK/HAL_TIMEOUT
 492:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
 494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 752              		.loc 1 494 1 is_stmt 1 view -0
 753              		.cfi_startproc
ARM GAS  /tmp/ccEZ6zfz.s 			page 23


 754              		@ args = 0, pretend = 0, frame = 0
 755              		@ frame_needed = 0, uses_anonymous_args = 0
 756 0000 10B5     		push	{r4, lr}
 757              	.LCFI5:
 758              		.cfi_def_cfa_offset 8
 759              		.cfi_offset 4, -8
 760              		.cfi_offset 14, -4
 495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   uint32_t  tickstart = 0;
 761              		.loc 1 495 3 view .LVU137
 762              	.LVL27:
 496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   
 497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 763              		.loc 1 497 3 view .LVU138
 764 0002 0B4A     		ldr	r2, .L76
 765 0004 1368     		ldr	r3, [r2]
 766 0006 43F00103 		orr	r3, r3, #1
 767 000a 1360     		str	r3, [r2]
 498:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   
 499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Get Start Tick*/
 500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   tickstart = HAL_GetTick();
 768              		.loc 1 500 3 view .LVU139
 769              		.loc 1 500 15 is_stmt 0 view .LVU140
 770 000c FFF7FEFF 		bl	HAL_GetTick
 771              	.LVL28:
 772 0010 0446     		mov	r4, r0
 773              	.LVL29:
 501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Wait for VRR bit  */
 503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == RESET)
 774              		.loc 1 503 3 is_stmt 1 view .LVU141
 775              	.L70:
 776              		.loc 1 503 9 is_stmt 0 view .LVU142
 777 0012 074B     		ldr	r3, .L76
 778 0014 1B68     		ldr	r3, [r3]
 779              		.loc 1 503 8 view .LVU143
 780 0016 13F0080F 		tst	r3, #8
 781 001a 06D1     		bne	.L75
 504:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 782              		.loc 1 505 5 is_stmt 1 view .LVU144
 783              		.loc 1 505 9 is_stmt 0 view .LVU145
 784 001c FFF7FEFF 		bl	HAL_GetTick
 785              	.LVL30:
 786              		.loc 1 505 23 view .LVU146
 787 0020 001B     		subs	r0, r0, r4
 788              		.loc 1 505 7 view .LVU147
 789 0022 0A28     		cmp	r0, #10
 790 0024 F5D9     		bls	.L70
 506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     {
 507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       return HAL_TIMEOUT;
 791              		.loc 1 507 14 view .LVU148
 792 0026 0320     		movs	r0, #3
 793 0028 00E0     		b	.L71
 794              	.L75:
 508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     }
 509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   
ARM GAS  /tmp/ccEZ6zfz.s 			page 24


 511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   return HAL_OK;
 795              		.loc 1 511 10 view .LVU149
 796 002a 0020     		movs	r0, #0
 797              	.L71:
 512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 798              		.loc 1 512 1 view .LVU150
 799 002c 10BD     		pop	{r4, pc}
 800              	.LVL31:
 801              	.L77:
 802              		.loc 1 512 1 view .LVU151
 803 002e 00BF     		.align	2
 804              	.L76:
 805 0030 003C0058 		.word	1476410368
 806              		.cfi_endproc
 807              	.LFE156:
 809              		.section	.text.HAL_SYSCFG_DisableVREFBUF,"ax",%progbits
 810              		.align	1
 811              		.global	HAL_SYSCFG_DisableVREFBUF
 812              		.syntax unified
 813              		.thumb
 814              		.thumb_func
 815              		.fpu fpv5-d16
 817              	HAL_SYSCFG_DisableVREFBUF:
 818              	.LFB157:
 513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
 516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *
 517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_DisableVREFBUF(void)
 520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 819              		.loc 1 520 1 is_stmt 1 view -0
 820              		.cfi_startproc
 821              		@ args = 0, pretend = 0, frame = 0
 822              		@ frame_needed = 0, uses_anonymous_args = 0
 823              		@ link register save eliminated.
 521:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 824              		.loc 1 521 3 view .LVU153
 825 0000 024A     		ldr	r2, .L79
 826 0002 1368     		ldr	r3, [r2]
 827 0004 23F00103 		bic	r3, r3, #1
 828 0008 1360     		str	r3, [r2]
 522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 829              		.loc 1 522 1 is_stmt 0 view .LVU154
 830 000a 7047     		bx	lr
 831              	.L80:
 832              		.align	2
 833              	.L79:
 834 000c 003C0058 		.word	1476410368
 835              		.cfi_endproc
 836              	.LFE157:
 838              		.section	.text.HAL_SYSCFG_ETHInterfaceSelect,"ax",%progbits
 839              		.align	1
 840              		.global	HAL_SYSCFG_ETHInterfaceSelect
 841              		.syntax unified
 842              		.thumb
ARM GAS  /tmp/ccEZ6zfz.s 			page 25


 843              		.thumb_func
 844              		.fpu fpv5-d16
 846              	HAL_SYSCFG_ETHInterfaceSelect:
 847              	.LVL32:
 848              	.LFB158:
 523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Ethernet PHY Interface Selection either MII or RMII
 526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param  SYSCFG_ETHInterface: Selects the Ethernet PHY interface
 527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   This parameter can be one of the following values:
 528:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
 529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
 530:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
 533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 849              		.loc 1 533 1 is_stmt 1 view -0
 850              		.cfi_startproc
 851              		@ args = 0, pretend = 0, frame = 0
 852              		@ frame_needed = 0, uses_anonymous_args = 0
 853              		@ link register save eliminated.
 534:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameter */
 535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));
 854              		.loc 1 535 3 view .LVU156
 536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   MODIFY_REG(SYSCFG->PMCR, SYCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));  
 855              		.loc 1 537 3 view .LVU157
 856 0000 034A     		ldr	r2, .L82
 857 0002 5368     		ldr	r3, [r2, #4]
 858 0004 23F46003 		bic	r3, r3, #14680064
 859 0008 1843     		orrs	r0, r0, r3
 860              	.LVL33:
 861              		.loc 1 537 3 is_stmt 0 view .LVU158
 862 000a 5060     		str	r0, [r2, #4]
 538:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 863              		.loc 1 538 1 view .LVU159
 864 000c 7047     		bx	lr
 865              	.L83:
 866 000e 00BF     		.align	2
 867              	.L82:
 868 0010 00040058 		.word	1476396032
 869              		.cfi_endproc
 870              	.LFE158:
 872              		.section	.text.HAL_SYSCFG_AnalogSwitchConfig,"ax",%progbits
 873              		.align	1
 874              		.global	HAL_SYSCFG_AnalogSwitchConfig
 875              		.syntax unified
 876              		.thumb
 877              		.thumb_func
 878              		.fpu fpv5-d16
 880              	HAL_SYSCFG_AnalogSwitchConfig:
 881              	.LVL34:
 882              	.LFB159:
 539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Analog Switch control for dual analog pads.
ARM GAS  /tmp/ccEZ6zfz.s 			page 26


 543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param  SYSCFG_AnalogSwitch: Selects the analog pad
 544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   This parameter can be one or a combination of the following values:
 545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_SWITCH_PA0 : Select PA0 analog switch
 546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_SWITCH_PA1:  Select PA1 analog switch
 547:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_SWITCH_PC2 : Select PC2 analog switch
 548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_SWITCH_PC3:  Select PC3 analog switch
 549:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param  SYSCFG_SwitchState: Open or Close the analog switch between dual pads (PXn and PXn_C)
 550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   This parameter can be one or a combination of the following values:
 551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_SWITCH_PA0_OPEN  
 552:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_SWITCH_PA0_CLOSE 
 553:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_SWITCH_PA1_OPEN  
 554:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_SWITCH_PA1_CLOSE 
 555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_SWITCH_PC2_OPEN  
 556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_SWITCH_PC2_CLOSE 
 557:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_SWITCH_PC3_OPEN 
 558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_SWITCH_PC3_CLOSE 
 559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 560:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
 563:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 883              		.loc 1 563 1 is_stmt 1 view -0
 884              		.cfi_startproc
 885              		@ args = 0, pretend = 0, frame = 0
 886              		@ frame_needed = 0, uses_anonymous_args = 0
 887              		@ link register save eliminated.
 564:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameter */
 565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
 888              		.loc 1 565 3 view .LVU161
 566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));
 889              		.loc 1 566 3 view .LVU162
 567:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   
 568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));  
 890              		.loc 1 568 3 view .LVU163
 891 0000 034A     		ldr	r2, .L85
 892 0002 5368     		ldr	r3, [r2, #4]
 893 0004 23EA0000 		bic	r0, r3, r0
 894              	.LVL35:
 895              		.loc 1 568 3 is_stmt 0 view .LVU164
 896 0008 0843     		orrs	r0, r0, r1
 897 000a 5060     		str	r0, [r2, #4]
 569:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 898              		.loc 1 569 1 view .LVU165
 899 000c 7047     		bx	lr
 900              	.L86:
 901 000e 00BF     		.align	2
 902              	.L85:
 903 0010 00040058 		.word	1476396032
 904              		.cfi_endproc
 905              	.LFE159:
 907              		.section	.text.HAL_SYSCFG_EnableBOOST,"ax",%progbits
 908              		.align	1
 909              		.global	HAL_SYSCFG_EnableBOOST
 910              		.syntax unified
 911              		.thumb
 912              		.thumb_func
 913              		.fpu fpv5-d16
ARM GAS  /tmp/ccEZ6zfz.s 			page 27


 915              	HAL_SYSCFG_EnableBOOST:
 916              	.LFB160:
 570:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 571:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 573:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Enables the booster to reduce the total harmonic distortion of the analog
 574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         switch when the supply voltage is lower than 2.7 V.
 575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note   Activating the booster allows to guaranty the analog switch AC performance
 576:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         when the supply voltage is below 2.7 V: in this case, the analog switch
 577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         performance is the same on the full voltage range
 578:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_EnableBOOST(void)
 581:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 917              		.loc 1 581 1 is_stmt 1 view -0
 918              		.cfi_startproc
 919              		@ args = 0, pretend = 0, frame = 0
 920              		@ frame_needed = 0, uses_anonymous_args = 0
 921              		@ link register save eliminated.
 582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  SET_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
 922              		.loc 1 582 2 view .LVU167
 923 0000 024A     		ldr	r2, .L88
 924 0002 5368     		ldr	r3, [r2, #4]
 925 0004 43F48073 		orr	r3, r3, #256
 926 0008 5360     		str	r3, [r2, #4]
 583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 927              		.loc 1 583 1 is_stmt 0 view .LVU168
 928 000a 7047     		bx	lr
 929              	.L89:
 930              		.align	2
 931              	.L88:
 932 000c 00040058 		.word	1476396032
 933              		.cfi_endproc
 934              	.LFE160:
 936              		.section	.text.HAL_SYSCFG_DisableBOOST,"ax",%progbits
 937              		.align	1
 938              		.global	HAL_SYSCFG_DisableBOOST
 939              		.syntax unified
 940              		.thumb
 941              		.thumb_func
 942              		.fpu fpv5-d16
 944              	HAL_SYSCFG_DisableBOOST:
 945              	.LFB161:
 584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 586:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Disables the booster
 587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note   Activating the booster allows to guaranty the analog switch AC performance
 588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         when the supply voltage is below 2.7 V: in this case, the analog switch
 589:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         performance is the same on the full voltage range
 590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_DisableBOOST(void)
 593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 946              		.loc 1 593 1 is_stmt 1 view -0
 947              		.cfi_startproc
 948              		@ args = 0, pretend = 0, frame = 0
 949              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccEZ6zfz.s 			page 28


 950              		@ link register save eliminated.
 594:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  CLEAR_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
 951              		.loc 1 594 2 view .LVU170
 952 0000 024A     		ldr	r2, .L91
 953 0002 5368     		ldr	r3, [r2, #4]
 954 0004 23F48073 		bic	r3, r3, #256
 955 0008 5360     		str	r3, [r2, #4]
 595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 956              		.loc 1 595 1 is_stmt 0 view .LVU171
 957 000a 7047     		bx	lr
 958              	.L92:
 959              		.align	2
 960              	.L91:
 961 000c 00040058 		.word	1476396032
 962              		.cfi_endproc
 963              	.LFE161:
 965              		.section	.text.HAL_SYSCFG_CM7BootAddConfig,"ax",%progbits
 966              		.align	1
 967              		.global	HAL_SYSCFG_CM7BootAddConfig
 968              		.syntax unified
 969              		.thumb
 970              		.thumb_func
 971              		.fpu fpv5-d16
 973              	HAL_SYSCFG_CM7BootAddConfig:
 974              	.LVL36:
 975              	.LFB162:
 596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  BootCM7 address 0 configuration
 600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param  BootRegister :Specifies the Boot Address register (Address0 or Address1)
 601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   This parameter can be one of the following values:
 602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_BOOT_ADDR0 : Select the boot address0 
 603:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_BOOT_ADDR1:  Select the boot address1
 604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param  BootAddress :Specifies the CM7 Boot Address to be loaded in Address0 or Address1
 605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_CM7BootAddConfig(uint32_t BootRegister, uint32_t BootAddress)
 608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 976              		.loc 1 608 1 is_stmt 1 view -0
 977              		.cfi_startproc
 978              		@ args = 0, pretend = 0, frame = 0
 979              		@ frame_needed = 0, uses_anonymous_args = 0
 980              		@ link register save eliminated.
 609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameters */
 610:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_SYSCFG_BOOT_REGISTER(BootRegister));
 981              		.loc 1 610 3 view .LVU173
 611:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_SYSCFG_BOOT_ADDRESS(BootAddress));
 982              		.loc 1 611 3 view .LVU174
 612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   if ( BootRegister == SYSCFG_BOOT_ADDR0 )
 983              		.loc 1 612 3 view .LVU175
 984              		.loc 1 612 6 is_stmt 0 view .LVU176
 985 0000 70B9     		cbnz	r0, .L94
 613:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 614:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     /* Configure CM7 BOOT ADD0 */
 615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     MODIFY_REG(SYSCFG->UR2, SYSCFG_UR2_BOOT_ADD0, ((BootAddress >> 16) << POSITION_VAL(SYSCFG_UR2_B
 986              		.loc 1 615 5 is_stmt 1 view .LVU177
ARM GAS  /tmp/ccEZ6zfz.s 			page 29


 987 0002 0C48     		ldr	r0, .L96
 988              	.LVL37:
 989              		.loc 1 615 5 is_stmt 0 view .LVU178
 990 0004 D0F80833 		ldr	r3, [r0, #776]
 991 0008 9BB2     		uxth	r3, r3
 992 000a 090C     		lsrs	r1, r1, #16
 993              	.LVL38:
 994              	.LBB4:
 995              	.LBI4:
 996              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     02. February 2017
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                     __asm
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  39:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                  inline
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  42:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE           static inline
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  45:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN               __attribute__((noreturn))
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
ARM GAS  /tmp/ccEZ6zfz.s 			page 30


  48:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                    __attribute__((used))
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  50:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                    __attribute__((weak))
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wpacked"
  56:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wattributes"
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic pop
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)              __attribute__((aligned(x)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                  __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT           struct __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  71:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
  84:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccEZ6zfz.s 			page 31


 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_CONTROL(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 119:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_CONTROL_NS(void)
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 136:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 138:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 139:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 147:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_CONTROL_NS(uint32_t control)
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 153:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_IPSR(void)
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccEZ6zfz.s 			page 32


 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_APSR(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 185:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_xPSR(void)
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 199:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 214:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSP_NS(void)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
ARM GAS  /tmp/ccEZ6zfz.s 			page 33


 219:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 220:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 242:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 246:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSP(void)
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSP_NS(void)
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccEZ6zfz.s 			page 34


 276:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 293:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 294:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 297:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PRIMASK_NS(void)
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 326:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccEZ6zfz.s 			page 35


 333:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 335:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 336:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 337:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 340:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 347:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 364:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 365:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_fault_irq(void)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 372:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 373:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 374:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 376:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_fault_irq(void)
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 380:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccEZ6zfz.s 			page 36


 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_BASEPRI_NS(void)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 411:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 423:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 437:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccEZ6zfz.s 			page 37


 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 487:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 489:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 494:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
ARM GAS  /tmp/ccEZ6zfz.s 			page 38


 504:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 515:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSPLIM(void)
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 517:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 523:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 524:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 527:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 530:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSPLIM_NS(void)
 532:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 533:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 536:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 538:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 539:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 543:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 545:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 546:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 547:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 559:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccEZ6zfz.s 			page 39


 561:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 565:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 566:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 569:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 570:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 571:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSPLIM(void)
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 576:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 581:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 588:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSPLIM_NS(void)
 589:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 591:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 593:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 595:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 602:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 607:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 614:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 617:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccEZ6zfz.s 			page 40


 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 620:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 623:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 629:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FPSCR(void)
 635:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 642:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 643:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0U);
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 659:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 662:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
ARM GAS  /tmp/ccEZ6zfz.s 			page 41


 675:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 676:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 677:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 679:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 686:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 687:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 688:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 691:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 692:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** //{
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** //  __ASM volatile ("nop");
 697:Drivers/CMSIS/Include/cmsis_gcc.h **** //}
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")       /* This implementation gen
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 705:Drivers/CMSIS/Include/cmsis_gcc.h **** //{
 706:Drivers/CMSIS/Include/cmsis_gcc.h **** //  __ASM volatile ("wfi");
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** //}
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")       /* This implementation gen
 709:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 710:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 717:Drivers/CMSIS/Include/cmsis_gcc.h **** //{
 718:Drivers/CMSIS/Include/cmsis_gcc.h **** //  __ASM volatile ("wfe");
 719:Drivers/CMSIS/Include/cmsis_gcc.h **** //}
 720:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")       /* This implementation gen
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 725:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 728:Drivers/CMSIS/Include/cmsis_gcc.h **** //{
 729:Drivers/CMSIS/Include/cmsis_gcc.h **** //  __ASM volatile ("sev");
 730:Drivers/CMSIS/Include/cmsis_gcc.h **** //}
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")       /* This implementation gen
ARM GAS  /tmp/ccEZ6zfz.s 			page 42


 732:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 740:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 741:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 743:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 744:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 745:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 747:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 748:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 753:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 770:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 771:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 774:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 776:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 777:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
ARM GAS  /tmp/ccEZ6zfz.s 			page 43


 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 792:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 798:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 802:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 807:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 811:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 813:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 821:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 822:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 823:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 824:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 825:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 833:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 836:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 837:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 841:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
ARM GAS  /tmp/ccEZ6zfz.s 			page 44


 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 997              		.loc 2 850 57 is_stmt 1 view .LVU179
 998              	.LBB5:
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 852:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 999              		.loc 2 852 3 view .LVU180
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 854:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1000              		.loc 2 857 4 view .LVU181
 1001 000c 0A4A     		ldr	r2, .L96+4
 1002              		.syntax unified
 1003              	@ 857 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1004 000e 92FAA2F2 		rbit r2, r2
 1005              	@ 0 "" 2
 1006              	.LVL39:
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 859:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t s = (4 /*sizeof(v)*/ * 8) - 1; /* extra shift needed at end */
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value; value >>= 1U)
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 866:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 867:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 1007              		.loc 2 870 3 view .LVU182
 1008              		.loc 2 870 3 is_stmt 0 view .LVU183
 1009              		.thumb
 1010              		.syntax unified
 1011              	.LBE5:
 1012              	.LBE4:
 1013              		.loc 1 615 5 view .LVU184
 1014 0012 B2FA82F2 		clz	r2, r2
 1015 0016 9140     		lsls	r1, r1, r2
 1016 0018 1943     		orrs	r1, r1, r3
 1017 001a C0F80813 		str	r1, [r0, #776]
 1018 001e 7047     		bx	lr
 1019              	.LVL40:
 1020              	.L94:
 616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }   
 617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   else 
 618:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   {
 619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     /* Configure CM7 BOOT ADD1 */
 620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BOOT_ADD1, (BootAddress >> 16));
 1021              		.loc 1 620 5 is_stmt 1 view .LVU185
 1022 0020 044A     		ldr	r2, .L96
 1023 0022 D2F80C03 		ldr	r0, [r2, #780]
ARM GAS  /tmp/ccEZ6zfz.s 			page 45


 1024              	.LVL41:
 1025              		.loc 1 620 5 is_stmt 0 view .LVU186
 1026 0026 044B     		ldr	r3, .L96+4
 1027 0028 0340     		ands	r3, r3, r0
 1028 002a 43EA1141 		orr	r1, r3, r1, lsr #16
 1029              	.LVL42:
 1030              		.loc 1 620 5 view .LVU187
 1031 002e C2F80C13 		str	r1, [r2, #780]
 621:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   }
 622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   
 623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1032              		.loc 1 623 1 view .LVU188
 1033 0032 7047     		bx	lr
 1034              	.L97:
 1035              		.align	2
 1036              	.L96:
 1037 0034 00040058 		.word	1476396032
 1038 0038 0000FFFF 		.word	-65536
 1039              		.cfi_endproc
 1040              	.LFE162:
 1042              		.section	.text.HAL_EnableCompensationCell,"ax",%progbits
 1043              		.align	1
 1044              		.global	HAL_EnableCompensationCell
 1045              		.syntax unified
 1046              		.thumb
 1047              		.thumb_func
 1048              		.fpu fpv5-d16
 1050              	HAL_EnableCompensationCell:
 1051              	.LFB163:
 624:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 626:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Enables the I/O Compensation Cell.
 628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note   The I/O compensation cell can be used only when the device supply
 629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         voltage ranges from 2.4 to 3.6 V.
 630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_EnableCompensationCell(void)
 633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1052              		.loc 1 633 1 is_stmt 1 view -0
 1053              		.cfi_startproc
 1054              		@ args = 0, pretend = 0, frame = 0
 1055              		@ frame_needed = 0, uses_anonymous_args = 0
 1056              		@ link register save eliminated.
 634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 1057              		.loc 1 634 3 view .LVU190
 1058 0000 024A     		ldr	r2, .L99
 1059 0002 136A     		ldr	r3, [r2, #32]
 1060 0004 43F00103 		orr	r3, r3, #1
 1061 0008 1362     		str	r3, [r2, #32]
 635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1062              		.loc 1 635 1 is_stmt 0 view .LVU191
 1063 000a 7047     		bx	lr
 1064              	.L100:
 1065              		.align	2
 1066              	.L99:
 1067 000c 00040058 		.word	1476396032
ARM GAS  /tmp/ccEZ6zfz.s 			page 46


 1068              		.cfi_endproc
 1069              	.LFE163:
 1071              		.section	.text.HAL_DisableCompensationCell,"ax",%progbits
 1072              		.align	1
 1073              		.global	HAL_DisableCompensationCell
 1074              		.syntax unified
 1075              		.thumb
 1076              		.thumb_func
 1077              		.fpu fpv5-d16
 1079              	HAL_DisableCompensationCell:
 1080              	.LFB164:
 636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Power-down the I/O Compensation Cell.
 639:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note   The I/O compensation cell can be used only when the device supply
 640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         voltage ranges from 2.4 to 3.6 V.
 641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_DisableCompensationCell(void)
 644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1081              		.loc 1 644 1 is_stmt 1 view -0
 1082              		.cfi_startproc
 1083              		@ args = 0, pretend = 0, frame = 0
 1084              		@ frame_needed = 0, uses_anonymous_args = 0
 1085              		@ link register save eliminated.
 645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   CLEAR_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 1086              		.loc 1 645 3 view .LVU193
 1087 0000 024A     		ldr	r2, .L102
 1088 0002 136A     		ldr	r3, [r2, #32]
 1089 0004 23F00103 		bic	r3, r3, #1
 1090 0008 1362     		str	r3, [r2, #32]
 646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1091              		.loc 1 646 1 is_stmt 0 view .LVU194
 1092 000a 7047     		bx	lr
 1093              	.L103:
 1094              		.align	2
 1095              	.L102:
 1096 000c 00040058 		.word	1476396032
 1097              		.cfi_endproc
 1098              	.LFE164:
 1100              		.section	.text.HAL_SYSCFG_EnableIOSpeedOptimize,"ax",%progbits
 1101              		.align	1
 1102              		.global	HAL_SYSCFG_EnableIOSpeedOptimize
 1103              		.syntax unified
 1104              		.thumb
 1105              		.thumb_func
 1106              		.fpu fpv5-d16
 1108              	HAL_SYSCFG_EnableIOSpeedOptimize:
 1109              	.LFB165:
 647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 649:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  To Enable optimize the I/O speed when the product voltage is low.
 651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note   This bit is active only if PRODUCT_BELOW_25V user option bit is set. It must be
 652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         used only if the product supply voltage is below 2.5 V. Setting this bit when VDD is
 653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         higher than 2.5 V might be destructive.
 654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
ARM GAS  /tmp/ccEZ6zfz.s 			page 47


 655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_EnableIOSpeedOptimize(void)
 657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1110              		.loc 1 657 1 is_stmt 1 view -0
 1111              		.cfi_startproc
 1112              		@ args = 0, pretend = 0, frame = 0
 1113              		@ frame_needed = 0, uses_anonymous_args = 0
 1114              		@ link register save eliminated.
 658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****    SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_HSLV) ;
 1115              		.loc 1 658 4 view .LVU196
 1116 0000 024A     		ldr	r2, .L105
 1117 0002 136A     		ldr	r3, [r2, #32]
 1118 0004 43F48033 		orr	r3, r3, #65536
 1119 0008 1362     		str	r3, [r2, #32]
 659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1120              		.loc 1 659 1 is_stmt 0 view .LVU197
 1121 000a 7047     		bx	lr
 1122              	.L106:
 1123              		.align	2
 1124              	.L105:
 1125 000c 00040058 		.word	1476396032
 1126              		.cfi_endproc
 1127              	.LFE165:
 1129              		.section	.text.HAL_SYSCFG_DisableIOSpeedOptimize,"ax",%progbits
 1130              		.align	1
 1131              		.global	HAL_SYSCFG_DisableIOSpeedOptimize
 1132              		.syntax unified
 1133              		.thumb
 1134              		.thumb_func
 1135              		.fpu fpv5-d16
 1137              	HAL_SYSCFG_DisableIOSpeedOptimize:
 1138              	.LFB166:
 660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  To Disable optimize the I/O speed when the product voltage is low.
 663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note   This bit is active only if PRODUCT_BELOW_25V user option bit is set. It must be
 664:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         used only if the product supply voltage is below 2.5 V. Setting this bit when VDD is
 665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         higher than 2.5 V might be destructive.
 666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_DisableIOSpeedOptimize(void)
 669:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1139              		.loc 1 669 1 is_stmt 1 view -0
 1140              		.cfi_startproc
 1141              		@ args = 0, pretend = 0, frame = 0
 1142              		@ frame_needed = 0, uses_anonymous_args = 0
 1143              		@ link register save eliminated.
 670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   CLEAR_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_HSLV) ;
 1144              		.loc 1 670 3 view .LVU199
 1145 0000 024A     		ldr	r2, .L108
 1146 0002 136A     		ldr	r3, [r2, #32]
 1147 0004 23F48033 		bic	r3, r3, #65536
 1148 0008 1362     		str	r3, [r2, #32]
 671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1149              		.loc 1 671 1 is_stmt 0 view .LVU200
 1150 000a 7047     		bx	lr
 1151              	.L109:
ARM GAS  /tmp/ccEZ6zfz.s 			page 48


 1152              		.align	2
 1153              	.L108:
 1154 000c 00040058 		.word	1476396032
 1155              		.cfi_endproc
 1156              	.LFE166:
 1158              		.section	.text.HAL_SYSCFG_CompensationCodeSelect,"ax",%progbits
 1159              		.align	1
 1160              		.global	HAL_SYSCFG_CompensationCodeSelect
 1161              		.syntax unified
 1162              		.thumb
 1163              		.thumb_func
 1164              		.fpu fpv5-d16
 1166              	HAL_SYSCFG_CompensationCodeSelect:
 1167              	.LVL43:
 1168              	.LFB167:
 672:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Code selection for the I/O Compensation cell
 675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param  SYSCFG_CompCode: Selects the code to be applied for the I/O compensation cell
 676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   This parameter can be one of the following values:
 677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_CELL_CODE : Select Code from the cell (available in the SYSCFG_CCVR)
 678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg SYSCFG_REGISTER_CODE: Select Code from the SYSCFG compensation cell code register (SYSCF
 679:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_CompensationCodeSelect(uint32_t SYSCFG_CompCode)
 682:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1169              		.loc 1 682 1 is_stmt 1 view -0
 1170              		.cfi_startproc
 1171              		@ args = 0, pretend = 0, frame = 0
 1172              		@ frame_needed = 0, uses_anonymous_args = 0
 1173              		@ link register save eliminated.
 683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameter */
 684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_SYSCFG_CODE_SELECT(SYSCFG_CompCode));
 1174              		.loc 1 684 3 view .LVU202
 685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   MODIFY_REG(SYSCFG->CCCSR, SYSCFG_CCCSR_CS, (uint32_t)(SYSCFG_CompCode));  
 1175              		.loc 1 685 3 view .LVU203
 1176 0000 034A     		ldr	r2, .L111
 1177 0002 136A     		ldr	r3, [r2, #32]
 1178 0004 23F00203 		bic	r3, r3, #2
 1179 0008 1843     		orrs	r0, r0, r3
 1180              	.LVL44:
 1181              		.loc 1 685 3 is_stmt 0 view .LVU204
 1182 000a 1062     		str	r0, [r2, #32]
 686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1183              		.loc 1 686 1 view .LVU205
 1184 000c 7047     		bx	lr
 1185              	.L112:
 1186 000e 00BF     		.align	2
 1187              	.L111:
 1188 0010 00040058 		.word	1476396032
 1189              		.cfi_endproc
 1190              	.LFE167:
 1192              		.section	.text.HAL_SYSCFG_CompensationCodeConfig,"ax",%progbits
 1193              		.align	1
 1194              		.global	HAL_SYSCFG_CompensationCodeConfig
 1195              		.syntax unified
 1196              		.thumb
ARM GAS  /tmp/ccEZ6zfz.s 			page 49


 1197              		.thumb_func
 1198              		.fpu fpv5-d16
 1200              	HAL_SYSCFG_CompensationCodeConfig:
 1201              	.LVL45:
 1202              	.LFB168:
 687:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Code selection for the I/O Compensation cell
 690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param  SYSCFG_PMOSCode: PMOS compensation code
 691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         This code is applied to the I/O compensation cell when the CS bit of the
 692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *          SYSCFG_CMPCR is set
 693:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param  SYSCFG_NMOSCode: NMOS compensation code
 694:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         This code is applied to the I/O compensation cell when the CS bit of the
 695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *          SYSCFG_CMPCR is set
 696:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 697:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SYSCFG_CompensationCodeConfig(uint32_t SYSCFG_PMOSCode, uint32_t SYSCFG_NMOSCode )
 699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1203              		.loc 1 699 1 is_stmt 1 view -0
 1204              		.cfi_startproc
 1205              		@ args = 0, pretend = 0, frame = 0
 1206              		@ frame_needed = 0, uses_anonymous_args = 0
 1207              		@ link register save eliminated.
 700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameter */
 701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_SYSCFG_CODE_CONFIG(SYSCFG_PMOSCode));
 1208              		.loc 1 701 3 view .LVU207
 702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_SYSCFG_CODE_CONFIG(SYSCFG_NMOSCode));
 1209              		.loc 1 702 3 view .LVU208
 703:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   MODIFY_REG(SYSCFG->CCCR, SYSCFG_CCCR_NCC|SYSCFG_CCCR_PCC, (((uint32_t)(SYSCFG_PMOSCode)<< 4)|(uin
 1210              		.loc 1 703 3 view .LVU209
 1211 0000 044A     		ldr	r2, .L114
 1212 0002 936A     		ldr	r3, [r2, #40]
 1213 0004 23F0FF03 		bic	r3, r3, #255
 1214 0008 41EA0010 		orr	r0, r1, r0, lsl #4
 1215              	.LVL46:
 1216              		.loc 1 703 3 is_stmt 0 view .LVU210
 1217 000c 0343     		orrs	r3, r3, r0
 1218 000e 9362     		str	r3, [r2, #40]
 704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1219              		.loc 1 704 1 view .LVU211
 1220 0010 7047     		bx	lr
 1221              	.L115:
 1222 0012 00BF     		.align	2
 1223              	.L114:
 1224 0014 00040058 		.word	1476396032
 1225              		.cfi_endproc
 1226              	.LFE168:
 1228              		.section	.text.HAL_DBGMCU_EnableDBGSleepMode,"ax",%progbits
 1229              		.align	1
 1230              		.global	HAL_DBGMCU_EnableDBGSleepMode
 1231              		.syntax unified
 1232              		.thumb
 1233              		.thumb_func
 1234              		.fpu fpv5-d16
 1236              	HAL_DBGMCU_EnableDBGSleepMode:
 1237              	.LFB169:
 705:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
ARM GAS  /tmp/ccEZ6zfz.s 			page 50


 706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Enable the Debug Module during Domain1 SLEEP mode
 709:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 710:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_EnableDBGSleepMode(void)
 712:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1238              		.loc 1 712 1 is_stmt 1 view -0
 1239              		.cfi_startproc
 1240              		@ args = 0, pretend = 0, frame = 0
 1241              		@ frame_needed = 0, uses_anonymous_args = 0
 1242              		@ link register save eliminated.
 713:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD1);
 1243              		.loc 1 713 3 view .LVU213
 1244 0000 024A     		ldr	r2, .L117
 1245 0002 5368     		ldr	r3, [r2, #4]
 1246 0004 43F00103 		orr	r3, r3, #1
 1247 0008 5360     		str	r3, [r2, #4]
 714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1248              		.loc 1 714 1 is_stmt 0 view .LVU214
 1249 000a 7047     		bx	lr
 1250              	.L118:
 1251              		.align	2
 1252              	.L117:
 1253 000c 0010005C 		.word	1543507968
 1254              		.cfi_endproc
 1255              	.LFE169:
 1257              		.section	.text.HAL_DBGMCU_DisableDBGSleepMode,"ax",%progbits
 1258              		.align	1
 1259              		.global	HAL_DBGMCU_DisableDBGSleepMode
 1260              		.syntax unified
 1261              		.thumb
 1262              		.thumb_func
 1263              		.fpu fpv5-d16
 1265              	HAL_DBGMCU_DisableDBGSleepMode:
 1266              	.LFB170:
 715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 716:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 717:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Disable the Debug Module during Domain1 SLEEP mode
 718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_DisableDBGSleepMode(void)
 721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1267              		.loc 1 721 1 is_stmt 1 view -0
 1268              		.cfi_startproc
 1269              		@ args = 0, pretend = 0, frame = 0
 1270              		@ frame_needed = 0, uses_anonymous_args = 0
 1271              		@ link register save eliminated.
 722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD1);
 1272              		.loc 1 722 3 view .LVU216
 1273 0000 024A     		ldr	r2, .L120
 1274 0002 5368     		ldr	r3, [r2, #4]
 1275 0004 23F00103 		bic	r3, r3, #1
 1276 0008 5360     		str	r3, [r2, #4]
 723:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1277              		.loc 1 723 1 is_stmt 0 view .LVU217
 1278 000a 7047     		bx	lr
ARM GAS  /tmp/ccEZ6zfz.s 			page 51


 1279              	.L121:
 1280              		.align	2
 1281              	.L120:
 1282 000c 0010005C 		.word	1543507968
 1283              		.cfi_endproc
 1284              	.LFE170:
 1286              		.section	.text.HAL_DBGMCU_EnableDBGStopMode,"ax",%progbits
 1287              		.align	1
 1288              		.global	HAL_DBGMCU_EnableDBGStopMode
 1289              		.syntax unified
 1290              		.thumb
 1291              		.thumb_func
 1292              		.fpu fpv5-d16
 1294              	HAL_DBGMCU_EnableDBGStopMode:
 1295              	.LFB171:
 724:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 725:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 726:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Enable the Debug Module during Domain1 STOP mode
 727:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 728:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_EnableDBGStopMode(void)
 730:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1296              		.loc 1 730 1 is_stmt 1 view -0
 1297              		.cfi_startproc
 1298              		@ args = 0, pretend = 0, frame = 0
 1299              		@ frame_needed = 0, uses_anonymous_args = 0
 1300              		@ link register save eliminated.
 731:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD1);
 1301              		.loc 1 731 3 view .LVU219
 1302 0000 024A     		ldr	r2, .L123
 1303 0002 5368     		ldr	r3, [r2, #4]
 1304 0004 43F00203 		orr	r3, r3, #2
 1305 0008 5360     		str	r3, [r2, #4]
 732:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1306              		.loc 1 732 1 is_stmt 0 view .LVU220
 1307 000a 7047     		bx	lr
 1308              	.L124:
 1309              		.align	2
 1310              	.L123:
 1311 000c 0010005C 		.word	1543507968
 1312              		.cfi_endproc
 1313              	.LFE171:
 1315              		.section	.text.HAL_DBGMCU_DisableDBGStopMode,"ax",%progbits
 1316              		.align	1
 1317              		.global	HAL_DBGMCU_DisableDBGStopMode
 1318              		.syntax unified
 1319              		.thumb
 1320              		.thumb_func
 1321              		.fpu fpv5-d16
 1323              	HAL_DBGMCU_DisableDBGStopMode:
 1324              	.LFB172:
 733:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Disable the Debug Module during Domain1 STOP mode
 736:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 737:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_DisableDBGStopMode(void)
ARM GAS  /tmp/ccEZ6zfz.s 			page 52


 739:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1325              		.loc 1 739 1 is_stmt 1 view -0
 1326              		.cfi_startproc
 1327              		@ args = 0, pretend = 0, frame = 0
 1328              		@ frame_needed = 0, uses_anonymous_args = 0
 1329              		@ link register save eliminated.
 740:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD1);
 1330              		.loc 1 740 3 view .LVU222
 1331 0000 024A     		ldr	r2, .L126
 1332 0002 5368     		ldr	r3, [r2, #4]
 1333 0004 23F00203 		bic	r3, r3, #2
 1334 0008 5360     		str	r3, [r2, #4]
 741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1335              		.loc 1 741 1 is_stmt 0 view .LVU223
 1336 000a 7047     		bx	lr
 1337              	.L127:
 1338              		.align	2
 1339              	.L126:
 1340 000c 0010005C 		.word	1543507968
 1341              		.cfi_endproc
 1342              	.LFE172:
 1344              		.section	.text.HAL_DBGMCU_EnableDBGStandbyMode,"ax",%progbits
 1345              		.align	1
 1346              		.global	HAL_DBGMCU_EnableDBGStandbyMode
 1347              		.syntax unified
 1348              		.thumb
 1349              		.thumb_func
 1350              		.fpu fpv5-d16
 1352              	HAL_DBGMCU_EnableDBGStandbyMode:
 1353              	.LFB173:
 742:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 743:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Enable the Debug Module during Domain1 STANDBY mode
 745:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 746:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_EnableDBGStandbyMode(void)
 748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1354              		.loc 1 748 1 is_stmt 1 view -0
 1355              		.cfi_startproc
 1356              		@ args = 0, pretend = 0, frame = 0
 1357              		@ frame_needed = 0, uses_anonymous_args = 0
 1358              		@ link register save eliminated.
 749:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD1);
 1359              		.loc 1 749 3 view .LVU225
 1360 0000 024A     		ldr	r2, .L129
 1361 0002 5368     		ldr	r3, [r2, #4]
 1362 0004 43F00403 		orr	r3, r3, #4
 1363 0008 5360     		str	r3, [r2, #4]
 750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1364              		.loc 1 750 1 is_stmt 0 view .LVU226
 1365 000a 7047     		bx	lr
 1366              	.L130:
 1367              		.align	2
 1368              	.L129:
 1369 000c 0010005C 		.word	1543507968
 1370              		.cfi_endproc
 1371              	.LFE173:
ARM GAS  /tmp/ccEZ6zfz.s 			page 53


 1373              		.section	.text.HAL_DBGMCU_DisableDBGStandbyMode,"ax",%progbits
 1374              		.align	1
 1375              		.global	HAL_DBGMCU_DisableDBGStandbyMode
 1376              		.syntax unified
 1377              		.thumb
 1378              		.thumb_func
 1379              		.fpu fpv5-d16
 1381              	HAL_DBGMCU_DisableDBGStandbyMode:
 1382              	.LFB174:
 751:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Disable the Debug Module during Domain1 STANDBY mode
 754:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_DisableDBGStandbyMode(void)
 757:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1383              		.loc 1 757 1 is_stmt 1 view -0
 1384              		.cfi_startproc
 1385              		@ args = 0, pretend = 0, frame = 0
 1386              		@ frame_needed = 0, uses_anonymous_args = 0
 1387              		@ link register save eliminated.
 758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD1);
 1388              		.loc 1 758 3 view .LVU228
 1389 0000 024A     		ldr	r2, .L132
 1390 0002 5368     		ldr	r3, [r2, #4]
 1391 0004 23F00403 		bic	r3, r3, #4
 1392 0008 5360     		str	r3, [r2, #4]
 759:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1393              		.loc 1 759 1 is_stmt 0 view .LVU229
 1394 000a 7047     		bx	lr
 1395              	.L133:
 1396              		.align	2
 1397              	.L132:
 1398 000c 0010005C 		.word	1543507968
 1399              		.cfi_endproc
 1400              	.LFE174:
 1402              		.section	.text.HAL_EnableDomain3DBGStopMode,"ax",%progbits
 1403              		.align	1
 1404              		.global	HAL_EnableDomain3DBGStopMode
 1405              		.syntax unified
 1406              		.thumb
 1407              		.thumb_func
 1408              		.fpu fpv5-d16
 1410              	HAL_EnableDomain3DBGStopMode:
 1411              	.LFB175:
 760:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 762:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 764:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Enable the Debug Module during Domain3 STOP mode
 765:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 767:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_EnableDomain3DBGStopMode(void)
 768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1412              		.loc 1 768 1 is_stmt 1 view -0
 1413              		.cfi_startproc
 1414              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccEZ6zfz.s 			page 54


 1415              		@ frame_needed = 0, uses_anonymous_args = 0
 1416              		@ link register save eliminated.
 769:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD3);
 1417              		.loc 1 769 3 view .LVU231
 1418 0000 024A     		ldr	r2, .L135
 1419 0002 5368     		ldr	r3, [r2, #4]
 1420 0004 43F08003 		orr	r3, r3, #128
 1421 0008 5360     		str	r3, [r2, #4]
 770:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1422              		.loc 1 770 1 is_stmt 0 view .LVU232
 1423 000a 7047     		bx	lr
 1424              	.L136:
 1425              		.align	2
 1426              	.L135:
 1427 000c 0010005C 		.word	1543507968
 1428              		.cfi_endproc
 1429              	.LFE175:
 1431              		.section	.text.HAL_DisableDomain3DBGStopMode,"ax",%progbits
 1432              		.align	1
 1433              		.global	HAL_DisableDomain3DBGStopMode
 1434              		.syntax unified
 1435              		.thumb
 1436              		.thumb_func
 1437              		.fpu fpv5-d16
 1439              	HAL_DisableDomain3DBGStopMode:
 1440              	.LFB176:
 771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 772:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 773:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Disable the Debug Module during Domain3 STOP mode
 774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 775:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 776:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_DisableDomain3DBGStopMode(void)
 777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1441              		.loc 1 777 1 is_stmt 1 view -0
 1442              		.cfi_startproc
 1443              		@ args = 0, pretend = 0, frame = 0
 1444              		@ frame_needed = 0, uses_anonymous_args = 0
 1445              		@ link register save eliminated.
 778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD3);
 1446              		.loc 1 778 3 view .LVU234
 1447 0000 024A     		ldr	r2, .L138
 1448 0002 5368     		ldr	r3, [r2, #4]
 1449 0004 23F08003 		bic	r3, r3, #128
 1450 0008 5360     		str	r3, [r2, #4]
 779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1451              		.loc 1 779 1 is_stmt 0 view .LVU235
 1452 000a 7047     		bx	lr
 1453              	.L139:
 1454              		.align	2
 1455              	.L138:
 1456 000c 0010005C 		.word	1543507968
 1457              		.cfi_endproc
 1458              	.LFE176:
 1460              		.section	.text.HAL_EnableDomain3DBGStandbyMode,"ax",%progbits
 1461              		.align	1
 1462              		.global	HAL_EnableDomain3DBGStandbyMode
 1463              		.syntax unified
ARM GAS  /tmp/ccEZ6zfz.s 			page 55


 1464              		.thumb
 1465              		.thumb_func
 1466              		.fpu fpv5-d16
 1468              	HAL_EnableDomain3DBGStandbyMode:
 1469              	.LFB177:
 780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Enable the Debug Module during Domain3 STANDBY mode
 783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 785:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_EnableDomain3DBGStandbyMode(void)
 786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1470              		.loc 1 786 1 is_stmt 1 view -0
 1471              		.cfi_startproc
 1472              		@ args = 0, pretend = 0, frame = 0
 1473              		@ frame_needed = 0, uses_anonymous_args = 0
 1474              		@ link register save eliminated.
 787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD3);
 1475              		.loc 1 787 3 view .LVU237
 1476 0000 024A     		ldr	r2, .L141
 1477 0002 5368     		ldr	r3, [r2, #4]
 1478 0004 43F48073 		orr	r3, r3, #256
 1479 0008 5360     		str	r3, [r2, #4]
 788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1480              		.loc 1 788 1 is_stmt 0 view .LVU238
 1481 000a 7047     		bx	lr
 1482              	.L142:
 1483              		.align	2
 1484              	.L141:
 1485 000c 0010005C 		.word	1543507968
 1486              		.cfi_endproc
 1487              	.LFE177:
 1489              		.section	.text.HAL_DisableDomain3DBGStandbyMode,"ax",%progbits
 1490              		.align	1
 1491              		.global	HAL_DisableDomain3DBGStandbyMode
 1492              		.syntax unified
 1493              		.thumb
 1494              		.thumb_func
 1495              		.fpu fpv5-d16
 1497              	HAL_DisableDomain3DBGStandbyMode:
 1498              	.LFB178:
 789:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 791:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Disable the Debug Module during Domain3 STANDBY mode
 792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 793:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_DisableDomain3DBGStandbyMode(void)
 795:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1499              		.loc 1 795 1 is_stmt 1 view -0
 1500              		.cfi_startproc
 1501              		@ args = 0, pretend = 0, frame = 0
 1502              		@ frame_needed = 0, uses_anonymous_args = 0
 1503              		@ link register save eliminated.
 796:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD3);
 1504              		.loc 1 796 3 view .LVU240
 1505 0000 024A     		ldr	r2, .L144
 1506 0002 5368     		ldr	r3, [r2, #4]
ARM GAS  /tmp/ccEZ6zfz.s 			page 56


 1507 0004 23F48073 		bic	r3, r3, #256
 1508 0008 5360     		str	r3, [r2, #4]
 797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1509              		.loc 1 797 1 is_stmt 0 view .LVU241
 1510 000a 7047     		bx	lr
 1511              	.L145:
 1512              		.align	2
 1513              	.L144:
 1514 000c 0010005C 		.word	1543507968
 1515              		.cfi_endproc
 1516              	.LFE178:
 1518              		.section	.text.HAL_SetFMCMemorySwappingConfig,"ax",%progbits
 1519              		.align	1
 1520              		.global	HAL_SetFMCMemorySwappingConfig
 1521              		.syntax unified
 1522              		.thumb
 1523              		.thumb_func
 1524              		.fpu fpv5-d16
 1526              	HAL_SetFMCMemorySwappingConfig:
 1527              	.LVL47:
 1528              	.LFB179:
 798:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 799:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Set the FMC Memory Mapping Swapping config.
 801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
 802:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****             FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
 803:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval HAL state
 804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
 806:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1529              		.loc 1 806 1 is_stmt 1 view -0
 1530              		.cfi_startproc
 1531              		@ args = 0, pretend = 0, frame = 0
 1532              		@ frame_needed = 0, uses_anonymous_args = 0
 1533              		@ link register save eliminated.
 807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameter */
 808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
 1534              		.loc 1 808 3 view .LVU243
 809:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   MODIFY_REG(FMC_Bank1->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 1535              		.loc 1 809 3 view .LVU244
 1536 0000 034A     		ldr	r2, .L147
 1537 0002 1368     		ldr	r3, [r2]
 1538 0004 23F04073 		bic	r3, r3, #50331648
 1539 0008 1843     		orrs	r0, r0, r3
 1540              	.LVL48:
 1541              		.loc 1 809 3 is_stmt 0 view .LVU245
 1542 000a 1060     		str	r0, [r2]
 810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1543              		.loc 1 810 1 view .LVU246
 1544 000c 7047     		bx	lr
 1545              	.L148:
 1546 000e 00BF     		.align	2
 1547              	.L147:
 1548 0010 00400052 		.word	1375748096
 1549              		.cfi_endproc
 1550              	.LFE179:
 1552              		.section	.text.HAL_GetFMCMemorySwappingConfig,"ax",%progbits
ARM GAS  /tmp/ccEZ6zfz.s 			page 57


 1553              		.align	1
 1554              		.global	HAL_GetFMCMemorySwappingConfig
 1555              		.syntax unified
 1556              		.thumb
 1557              		.thumb_func
 1558              		.fpu fpv5-d16
 1560              	HAL_GetFMCMemorySwappingConfig:
 1561              	.LFB180:
 811:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Get FMC Bank mapping mode.
 814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval The FMC Bank mapping mode. This parameter can be 
 815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****             FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
 816:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** */
 817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** uint32_t HAL_GetFMCMemorySwappingConfig(void)
 818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1562              		.loc 1 818 1 is_stmt 1 view -0
 1563              		.cfi_startproc
 1564              		@ args = 0, pretend = 0, frame = 0
 1565              		@ frame_needed = 0, uses_anonymous_args = 0
 1566              		@ link register save eliminated.
 819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   return READ_BIT(FMC_Bank1->BTCR[0], FMC_BCR1_BMAP);
 1567              		.loc 1 819 3 view .LVU248
 1568              		.loc 1 819 10 is_stmt 0 view .LVU249
 1569 0000 024B     		ldr	r3, .L150
 1570 0002 1868     		ldr	r0, [r3]
 820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1571              		.loc 1 820 1 view .LVU250
 1572 0004 00F04070 		and	r0, r0, #50331648
 1573 0008 7047     		bx	lr
 1574              	.L151:
 1575 000a 00BF     		.align	2
 1576              	.L150:
 1577 000c 00400052 		.word	1375748096
 1578              		.cfi_endproc
 1579              	.LFE180:
 1581              		.section	.text.HAL_EXTI_EdgeConfig,"ax",%progbits
 1582              		.align	1
 1583              		.global	HAL_EXTI_EdgeConfig
 1584              		.syntax unified
 1585              		.thumb
 1586              		.thumb_func
 1587              		.fpu fpv5-d16
 1589              	HAL_EXTI_EdgeConfig:
 1590              	.LVL49:
 1591              	.LFB181:
 821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 822:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 823:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Configure the EXTI input event line edge
 824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @note    No edge configuration for direct lines but for configurable lines:(EXTI_LINE0..EXTI_LI
 825:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *          EXTI_LINE49,EXTI_LINE51,EXTI_LINE82,EXTI_LINE84,EXTI_LINE85 and EXTI_LINE86.
 826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
 827:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         (EXTI_LINE0....EXTI_LINE88)excluding :line45, line81,line83 which are reserved  
 828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param   EXTI_Edge: Specifies  EXTI line Edge used.
 829:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *          This parameter can be one of the following values :
 830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg EXTI_RISING_EDGE : Configurable line, with Rising edge trigger detection
 831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg EXTI_FALLING_EDGE: Configurable line, with Falling edge trigger detection
ARM GAS  /tmp/ccEZ6zfz.s 			page 58


 832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 833:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 834:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_EXTI_EdgeConfig(uint32_t EXTI_Line , uint32_t EXTI_Edge )
 835:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1592              		.loc 1 835 1 is_stmt 1 view -0
 1593              		.cfi_startproc
 1594              		@ args = 0, pretend = 0, frame = 0
 1595              		@ frame_needed = 0, uses_anonymous_args = 0
 1596              		@ link register save eliminated.
 1597              		.loc 1 835 1 is_stmt 0 view .LVU252
 1598 0000 70B4     		push	{r4, r5, r6}
 1599              	.LCFI6:
 1600              		.cfi_def_cfa_offset 12
 1601              		.cfi_offset 4, -12
 1602              		.cfi_offset 5, -8
 1603              		.cfi_offset 6, -4
 836:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameter */
 837:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     assert_param(IS_EXTI_CONFIG_LINE(EXTI_Line));
 1604              		.loc 1 837 5 is_stmt 1 view .LVU253
 838:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     assert_param(IS_EXTI_EDGE_LINE(EXTI_Edge));
 1605              		.loc 1 838 5 view .LVU254
 839:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     /* Clear Rising Falling edge configuration */
 841:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20)), (uint3
 1606              		.loc 1 841 5 view .LVU255
 1607 0002 4309     		lsrs	r3, r0, #5
 1608 0004 5D01     		lsls	r5, r3, #5
 1609 0006 0F4C     		ldr	r4, .L156
 1610 0008 2E59     		ldr	r6, [r5, r4]
 1611 000a 00F01F00 		and	r0, r0, #31
 1612              	.LVL50:
 1613              		.loc 1 841 5 is_stmt 0 view .LVU256
 1614 000e 0122     		movs	r2, #1
 1615 0010 02FA00F0 		lsl	r0, r2, r0
 1616 0014 C243     		mvns	r2, r0
 1617 0016 1640     		ands	r6, r6, r2
 1618 0018 2E51     		str	r6, [r5, r4]
 842:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     CLEAR_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20)), (uint
 1619              		.loc 1 842 5 is_stmt 1 view .LVU257
 1620 001a 03F13073 		add	r3, r3, #46137344
 1621 001e 5B01     		lsls	r3, r3, #5
 1622 0020 1E68     		ldr	r6, [r3]
 1623 0022 3240     		ands	r2, r2, r6
 1624 0024 1A60     		str	r2, [r3]
 843:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****      if( (EXTI_Edge & EXTI_RISING_EDGE) == EXTI_RISING_EDGE)
 1625              		.loc 1 844 6 view .LVU258
 1626              		.loc 1 844 8 is_stmt 0 view .LVU259
 1627 0026 11F4801F 		tst	r1, #1048576
 1628 002a 02D0     		beq	.L153
 845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****         {
 846:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****          SET_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20)), (u
 1629              		.loc 1 846 10 is_stmt 1 view .LVU260
 1630 002c 1A68     		ldr	r2, [r3]
 1631 002e 0243     		orrs	r2, r2, r0
 1632 0030 1A60     		str	r2, [r3]
 1633              	.L153:
ARM GAS  /tmp/ccEZ6zfz.s 			page 59


 847:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****         }
 848:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       if( (EXTI_Edge & EXTI_FALLING_EDGE) == EXTI_FALLING_EDGE)
 1634              		.loc 1 848 7 view .LVU261
 1635              		.loc 1 848 9 is_stmt 0 view .LVU262
 1636 0032 11F4001F 		tst	r1, #2097152
 1637 0036 02D0     		beq	.L152
 849:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****         {
 850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****          SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20)), (ui
 1638              		.loc 1 850 10 is_stmt 1 view .LVU263
 1639 0038 2B59     		ldr	r3, [r5, r4]
 1640 003a 1843     		orrs	r0, r0, r3
 1641 003c 2851     		str	r0, [r5, r4]
 1642              	.L152:
 851:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****         }
 852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1643              		.loc 1 852 1 is_stmt 0 view .LVU264
 1644 003e 70BC     		pop	{r4, r5, r6}
 1645              	.LCFI7:
 1646              		.cfi_restore 6
 1647              		.cfi_restore 5
 1648              		.cfi_restore 4
 1649              		.cfi_def_cfa_offset 0
 1650 0040 7047     		bx	lr
 1651              	.L157:
 1652 0042 00BF     		.align	2
 1653              	.L156:
 1654 0044 04000058 		.word	1476395012
 1655              		.cfi_endproc
 1656              	.LFE181:
 1658              		.section	.text.HAL_EXTI_GenerateSWInterrupt,"ax",%progbits
 1659              		.align	1
 1660              		.global	HAL_EXTI_GenerateSWInterrupt
 1661              		.syntax unified
 1662              		.thumb
 1663              		.thumb_func
 1664              		.fpu fpv5-d16
 1666              	HAL_EXTI_GenerateSWInterrupt:
 1667              	.LVL51:
 1668              	.LFB182:
 853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****                                                                                     
 854:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Generates a Software interrupt on selected EXTI line.
 856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
 857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *          (EXTI_LINE0..EXTI_LINE21),EXTI_LINE49,EXTI_LINE51,EXTI_LINE82,EXTI_LINE84,EXTI_LINE85 
 858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 859:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
 861:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1669              		.loc 1 861 1 is_stmt 1 view -0
 1670              		.cfi_startproc
 1671              		@ args = 0, pretend = 0, frame = 0
 1672              		@ frame_needed = 0, uses_anonymous_args = 0
 1673              		@ link register save eliminated.
 1674              		.loc 1 861 1 is_stmt 0 view .LVU266
 1675 0000 10B4     		push	{r4}
 1676              	.LCFI8:
 1677              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccEZ6zfz.s 			page 60


 1678              		.cfi_offset 4, -4
 862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameters */
 863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   assert_param(IS_EXTI_CONFIG_LINE(EXTI_Line));
 1679              		.loc 1 863 3 is_stmt 1 view .LVU267
 864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 865:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->SWIER1)) + ((EXTI_Line >> 5 ) * 0x20)), (uint32_t
 1680              		.loc 1 865 3 view .LVU268
 1681 0002 20F01F04 		bic	r4, r0, #31
 1682 0006 0649     		ldr	r1, .L160
 1683 0008 6358     		ldr	r3, [r4, r1]
 1684 000a 00F01F00 		and	r0, r0, #31
 1685              	.LVL52:
 1686              		.loc 1 865 3 is_stmt 0 view .LVU269
 1687 000e 0122     		movs	r2, #1
 1688 0010 02FA00F0 		lsl	r0, r2, r0
 1689 0014 0343     		orrs	r3, r3, r0
 1690 0016 6350     		str	r3, [r4, r1]
 866:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1691              		.loc 1 866 1 view .LVU270
 1692 0018 5DF8044B 		ldr	r4, [sp], #4
 1693              	.LCFI9:
 1694              		.cfi_restore 4
 1695              		.cfi_def_cfa_offset 0
 1696 001c 7047     		bx	lr
 1697              	.L161:
 1698 001e 00BF     		.align	2
 1699              	.L160:
 1700 0020 08000058 		.word	1476395016
 1701              		.cfi_endproc
 1702              	.LFE182:
 1704              		.section	.text.HAL_EXTI_D1_ClearFlag,"ax",%progbits
 1705              		.align	1
 1706              		.global	HAL_EXTI_D1_ClearFlag
 1707              		.syntax unified
 1708              		.thumb
 1709              		.thumb_func
 1710              		.fpu fpv5-d16
 1712              	HAL_EXTI_D1_ClearFlag:
 1713              	.LVL53:
 1714              	.LFB183:
 867:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 868:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Clears the EXTI's line pending flags for Domain D1
 871:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
 872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         (EXTI_LINE0....EXTI_LINE88)excluding :line45, line81,line83 which are reserved 
 873:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 874:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_EXTI_D1_ClearFlag(uint32_t EXTI_Line)
 876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1715              		.loc 1 876 1 is_stmt 1 view -0
 1716              		.cfi_startproc
 1717              		@ args = 0, pretend = 0, frame = 0
 1718              		@ frame_needed = 0, uses_anonymous_args = 0
 1719              		@ link register save eliminated.
 1720              		.loc 1 876 1 is_stmt 0 view .LVU272
 1721 0000 10B4     		push	{r4}
ARM GAS  /tmp/ccEZ6zfz.s 			page 61


 1722              	.LCFI10:
 1723              		.cfi_def_cfa_offset 4
 1724              		.cfi_offset 4, -4
 877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameters */
 878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  assert_param(IS_EXTI_D1_LINE(EXTI_Line));
 1725              		.loc 1 878 2 is_stmt 1 view .LVU273
 879:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->PR1)) + ((EXTI_Line >> 5 ) * 0x10)), (uint32_t)
 1726              		.loc 1 879 2 view .LVU274
 1727 0002 4309     		lsrs	r3, r0, #5
 1728 0004 1B01     		lsls	r3, r3, #4
 1729 0006 064C     		ldr	r4, .L164
 1730 0008 1A59     		ldr	r2, [r3, r4]
 1731 000a 00F01F00 		and	r0, r0, #31
 1732              	.LVL54:
 1733              		.loc 1 879 2 is_stmt 0 view .LVU275
 1734 000e 0121     		movs	r1, #1
 1735 0010 01FA00F0 		lsl	r0, r1, r0
 1736 0014 0243     		orrs	r2, r2, r0
 1737 0016 1A51     		str	r2, [r3, r4]
 880:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1738              		.loc 1 881 1 view .LVU276
 1739 0018 5DF8044B 		ldr	r4, [sp], #4
 1740              	.LCFI11:
 1741              		.cfi_restore 4
 1742              		.cfi_def_cfa_offset 0
 1743 001c 7047     		bx	lr
 1744              	.L165:
 1745 001e 00BF     		.align	2
 1746              	.L164:
 1747 0020 88000058 		.word	1476395144
 1748              		.cfi_endproc
 1749              	.LFE183:
 1751              		.section	.text.HAL_EXTI_D1_EventInputConfig,"ax",%progbits
 1752              		.align	1
 1753              		.global	HAL_EXTI_D1_EventInputConfig
 1754              		.syntax unified
 1755              		.thumb
 1756              		.thumb_func
 1757              		.fpu fpv5-d16
 1759              	HAL_EXTI_D1_EventInputConfig:
 1760              	.LVL55:
 1761              	.LFB184:
 882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 883:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 884:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Configure the EXTI input event line for Domain D1
 885:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
 886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         (EXTI_LINE0....EXTI_LINE88)excluding :line45, line81,line83 which are reserved  
 887:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param   EXTI_Mode: Specifies which EXTI line is used as interrupt or an event. 
 888:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *          This parameter can be one or a combination of the following values :
 889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg EXTI_MODE_IT :  Interrupt Mode selected
 890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg EXTI_MODE_EVT : Event Mode selected
 891:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param   EXTI_LineCmd controls (Enable/Disable) the EXTI line.
 892:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 893:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 895:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_EXTI_D1_EventInputConfig(uint32_t EXTI_Line , uint32_t EXTI_Mode,  uint32_t EXTI_LineCmd )
ARM GAS  /tmp/ccEZ6zfz.s 			page 62


 896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1762              		.loc 1 896 1 is_stmt 1 view -0
 1763              		.cfi_startproc
 1764              		@ args = 0, pretend = 0, frame = 0
 1765              		@ frame_needed = 0, uses_anonymous_args = 0
 1766              		@ link register save eliminated.
 1767              		.loc 1 896 1 is_stmt 0 view .LVU278
 1768 0000 70B4     		push	{r4, r5, r6}
 1769              	.LCFI12:
 1770              		.cfi_def_cfa_offset 12
 1771              		.cfi_offset 4, -12
 1772              		.cfi_offset 5, -8
 1773              		.cfi_offset 6, -4
 897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   /* Check the parameter */
 898:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     assert_param(IS_EXTI_D1_LINE(EXTI_Line));
 1774              		.loc 1 898 5 is_stmt 1 view .LVU279
 899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     assert_param(IS_EXTI_MODE_LINE(EXTI_Mode));
 1775              		.loc 1 899 5 view .LVU280
 900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   if( (EXTI_Mode & EXTI_MODE_IT) == EXTI_MODE_IT)
 1776              		.loc 1 901 3 view .LVU281
 1777              		.loc 1 901 5 is_stmt 0 view .LVU282
 1778 0002 11F4803F 		tst	r1, #65536
 1779 0006 0CD0     		beq	.L167
 902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       {
 903:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****          if( EXTI_LineCmd == DISABLE)
 1780              		.loc 1 903 10 is_stmt 1 view .LVU283
 1781              		.loc 1 903 12 is_stmt 0 view .LVU284
 1782 0008 EAB9     		cbnz	r2, .L168
 904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            {
 905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            /* Clear EXTI line configuration */
 906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****             CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10
 1783              		.loc 1 906 13 is_stmt 1 view .LVU285
 1784 000a 1B4B     		ldr	r3, .L172
 1785 000c 03EB5013 		add	r3, r3, r0, lsr #5
 1786 0010 1B01     		lsls	r3, r3, #4
 1787 0012 1C68     		ldr	r4, [r3]
 1788 0014 00F01F06 		and	r6, r0, #31
 1789 0018 0125     		movs	r5, #1
 1790 001a B540     		lsls	r5, r5, r6
 1791 001c 24EA0504 		bic	r4, r4, r5
 1792 0020 1C60     		str	r4, [r3]
 1793              	.L167:
 907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            }
 908:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****          else 
 909:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            {
 910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****             SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10))
 911:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            }
 912:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****      }
 913:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  if( (EXTI_Mode & EXTI_MODE_EVT) == EXTI_MODE_EVT)
 1794              		.loc 1 913 2 view .LVU286
 1795              		.loc 1 913 4 is_stmt 0 view .LVU287
 1796 0022 11F4003F 		tst	r1, #131072
 1797 0026 0CD0     		beq	.L166
 914:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       {
 915:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****           if( EXTI_LineCmd == DISABLE)
 1798              		.loc 1 915 11 is_stmt 1 view .LVU288
ARM GAS  /tmp/ccEZ6zfz.s 			page 63


 1799              		.loc 1 915 13 is_stmt 0 view .LVU289
 1800 0028 CAB9     		cbnz	r2, .L170
 916:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            {
 917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****              /* Clear EXTI line configuration */
 918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****              CLEAR_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0
 1801              		.loc 1 918 14 is_stmt 1 view .LVU290
 1802 002a 4309     		lsrs	r3, r0, #5
 1803 002c 1B01     		lsls	r3, r3, #4
 1804 002e 134C     		ldr	r4, .L172+4
 1805 0030 1A59     		ldr	r2, [r3, r4]
 1806              	.LVL56:
 1807              		.loc 1 918 14 is_stmt 0 view .LVU291
 1808 0032 00F01F00 		and	r0, r0, #31
 1809              	.LVL57:
 1810              		.loc 1 918 14 view .LVU292
 1811 0036 0121     		movs	r1, #1
 1812              	.LVL58:
 1813              		.loc 1 918 14 view .LVU293
 1814 0038 01FA00F0 		lsl	r0, r1, r0
 1815 003c 22EA0002 		bic	r2, r2, r0
 1816 0040 1A51     		str	r2, [r3, r4]
 1817              	.L166:
 919:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            }
 920:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            else
 921:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            {  
 922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****             SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10
 923:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            } 
 924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       }
 925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 926:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1818              		.loc 1 926 1 view .LVU294
 1819 0042 70BC     		pop	{r4, r5, r6}
 1820              	.LCFI13:
 1821              		.cfi_remember_state
 1822              		.cfi_restore 6
 1823              		.cfi_restore 5
 1824              		.cfi_restore 4
 1825              		.cfi_def_cfa_offset 0
 1826 0044 7047     		bx	lr
 1827              	.LVL59:
 1828              	.L168:
 1829              	.LCFI14:
 1830              		.cfi_restore_state
 910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            }
 1831              		.loc 1 910 13 is_stmt 1 view .LVU295
 1832 0046 0C4B     		ldr	r3, .L172
 1833 0048 03EB5013 		add	r3, r3, r0, lsr #5
 1834 004c 1B01     		lsls	r3, r3, #4
 1835 004e 1C68     		ldr	r4, [r3]
 1836 0050 00F01F06 		and	r6, r0, #31
 1837 0054 0125     		movs	r5, #1
 1838 0056 B540     		lsls	r5, r5, r6
 1839 0058 2C43     		orrs	r4, r4, r5
 1840 005a 1C60     		str	r4, [r3]
 1841 005c E1E7     		b	.L167
 1842              	.L170:
 922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            } 
ARM GAS  /tmp/ccEZ6zfz.s 			page 64


 1843              		.loc 1 922 13 view .LVU296
 1844 005e 4309     		lsrs	r3, r0, #5
 1845 0060 1B01     		lsls	r3, r3, #4
 1846 0062 064C     		ldr	r4, .L172+4
 1847 0064 1A59     		ldr	r2, [r3, r4]
 1848              	.LVL60:
 922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            } 
 1849              		.loc 1 922 13 is_stmt 0 view .LVU297
 1850 0066 00F01F00 		and	r0, r0, #31
 1851              	.LVL61:
 922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            } 
 1852              		.loc 1 922 13 view .LVU298
 1853 006a 0121     		movs	r1, #1
 1854              	.LVL62:
 922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****            } 
 1855              		.loc 1 922 13 view .LVU299
 1856 006c 01FA00F0 		lsl	r0, r1, r0
 1857 0070 0243     		orrs	r2, r2, r0
 1858 0072 1A51     		str	r2, [r3, r4]
 1859              		.loc 1 926 1 view .LVU300
 1860 0074 E5E7     		b	.L166
 1861              	.L173:
 1862 0076 00BF     		.align	2
 1863              	.L172:
 1864 0078 08008005 		.word	92274696
 1865 007c 84000058 		.word	1476395140
 1866              		.cfi_endproc
 1867              	.LFE184:
 1869              		.section	.text.HAL_EXTI_D3_EventInputConfig,"ax",%progbits
 1870              		.align	1
 1871              		.global	HAL_EXTI_D3_EventInputConfig
 1872              		.syntax unified
 1873              		.thumb
 1874              		.thumb_func
 1875              		.fpu fpv5-d16
 1877              	HAL_EXTI_D3_EventInputConfig:
 1878              	.LVL63:
 1879              	.LFB185:
 927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 928:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 929:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** /**
 930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @brief  Configure the EXTI input event line for Domain D3 
 931:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
 932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *         (EXTI_LINE0...EXTI_LINE15),(EXTI_LINE19...EXTI_LINE21),EXTI_LINE25, EXTI_LINE34,
 933:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *          EXTI_LINE35,EXTI_LINE41,(EXTI_LINE48...EXTI_LINE53),EXTI_LINE88 
 934:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param   EXTI_LineCmd controls (Enable/Disable) the EXTI line.
 935:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @param   EXTI_ClearSrc: Specifies the clear source of D3 pending event.
 936:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *          This parameter can be one of the following values :
 937:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg BDMA_CH6_CLEAR : BDMA ch6 event selected as D3 domain pendclear source
 938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg BDMA_CH7_CLEAR : BDMA ch7 event selected as D3 domain pendclear source
 939:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg LPTIM4_OUT_CLEAR : LPTIM4 out selected as D3 domain pendclear source
 940:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   *   @arg LPTIM5_OUT_CLEAR : LPTIM5 out selected as D3 domain pendclear source
 941:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   * @retval None
 942:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****   */
 943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** void HAL_EXTI_D3_EventInputConfig(uint32_t EXTI_Line, uint32_t EXTI_LineCmd , uint32_t EXTI_ClearSr
 944:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** {
 1880              		.loc 1 944 1 is_stmt 1 view -0
ARM GAS  /tmp/ccEZ6zfz.s 			page 65


 1881              		.cfi_startproc
 1882              		@ args = 0, pretend = 0, frame = 0
 1883              		@ frame_needed = 0, uses_anonymous_args = 0
 1884              		@ link register save eliminated.
 1885              		.loc 1 944 1 is_stmt 0 view .LVU302
 1886 0000 70B4     		push	{r4, r5, r6}
 1887              	.LCFI15:
 1888              		.cfi_def_cfa_offset 12
 1889              		.cfi_offset 4, -12
 1890              		.cfi_offset 5, -8
 1891              		.cfi_offset 6, -4
 945:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  /* Check the parameter */
 947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     assert_param(IS_EXTI_D3_LINE(EXTI_Line));
 1892              		.loc 1 947 5 is_stmt 1 view .LVU303
 948:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     assert_param(IS_EXTI_D3_CLEAR(EXTI_ClearSrc));
 1893              		.loc 1 948 5 view .LVU304
 949:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 950:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     if( EXTI_LineCmd == DISABLE)
 1894              		.loc 1 950 5 view .LVU305
 1895              		.loc 1 950 7 is_stmt 0 view .LVU306
 1896 0002 F1B9     		cbnz	r1, .L175
 951:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       {
 952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       /* Clear EXTI line configuration */
 953:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****        CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->D3PMR1)) + ((EXTI_Line >> 5 ) * 0x20)),(ui
 1897              		.loc 1 953 8 is_stmt 1 view .LVU307
 1898 0004 20F01F03 		bic	r3, r0, #31
 1899 0008 1B4D     		ldr	r5, .L180
 1900 000a 5959     		ldr	r1, [r3, r5]
 1901              	.LVL64:
 1902              		.loc 1 953 8 is_stmt 0 view .LVU308
 1903 000c 00F01F06 		and	r6, r0, #31
 1904 0010 0124     		movs	r4, #1
 1905 0012 B440     		lsls	r4, r4, r6
 1906 0014 21EA0401 		bic	r1, r1, r4
 1907 0018 5951     		str	r1, [r3, r5]
 1908              	.L176:
 954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       }
 955:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****    else
 956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****      { 
 957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****        SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->D3PMR1)) +((EXTI_Line >> 5 ) * 0x20)), (uint
 958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****      }
 959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****  
 960:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     if ( (EXTI_Line>>4)%2 ==0)
 1909              		.loc 1 961 5 is_stmt 1 view .LVU309
 1910              		.loc 1 961 8 is_stmt 0 view .LVU310
 1911 001a 10F0100F 		tst	r0, #16
 1912 001e 1BD1     		bne	.L177
 962:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     {
 963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****      MODIFY_REG(*(__IO uint32_t *) (((uint32_t) &(EXTI->D3PCR1L)) + ((EXTI_Line >> 5 ) * 0x20)), \
 1913              		.loc 1 963 6 is_stmt 1 view .LVU311
 1914 0020 20F01F05 		bic	r5, r0, #31
 1915 0024 154C     		ldr	r4, .L180+4
 1916 0026 2B59     		ldr	r3, [r5, r4]
 1917 0028 4000     		lsls	r0, r0, #1
 1918              	.LVL65:
ARM GAS  /tmp/ccEZ6zfz.s 			page 66


 1919              		.loc 1 963 6 is_stmt 0 view .LVU312
 1920 002a 00F01E00 		and	r0, r0, #30
 1921 002e 0321     		movs	r1, #3
 1922 0030 8140     		lsls	r1, r1, r0
 1923 0032 23EA0103 		bic	r3, r3, r1
 1924 0036 02FA00F0 		lsl	r0, r2, r0
 1925 003a 1843     		orrs	r0, r0, r3
 1926 003c 2851     		str	r0, [r5, r4]
 1927              	.L174:
 964:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     (uint32_t)(3 << ((EXTI_Line*2) & 0x1F)), (uint32_t)(EXTI_ClearSrc << ((EXTI_Line*2) & 0x1F))) ;
 965:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     }
 966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****     else 
 968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       {
 969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       MODIFY_REG(*(__IO uint32_t *) (((uint32_t) &(EXTI->D3PCR1H)) + ((EXTI_Line >> 5 ) * 0x20)), \
 970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****      (uint32_t)(3 << ((EXTI_Line*2) & 0x1F)), (uint32_t)(EXTI_ClearSrc << ((EXTI_Line*2) & 0x1F))) 
 971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****       }
 972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** 
 973:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c **** }
 1928              		.loc 1 973 1 view .LVU313
 1929 003e 70BC     		pop	{r4, r5, r6}
 1930              	.LCFI16:
 1931              		.cfi_remember_state
 1932              		.cfi_restore 6
 1933              		.cfi_restore 5
 1934              		.cfi_restore 4
 1935              		.cfi_def_cfa_offset 0
 1936 0040 7047     		bx	lr
 1937              	.LVL66:
 1938              	.L175:
 1939              	.LCFI17:
 1940              		.cfi_restore_state
 957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****      }
 1941              		.loc 1 957 8 is_stmt 1 view .LVU314
 1942 0042 20F01F03 		bic	r3, r0, #31
 1943 0046 0C4D     		ldr	r5, .L180
 1944 0048 5959     		ldr	r1, [r3, r5]
 1945              	.LVL67:
 957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****      }
 1946              		.loc 1 957 8 is_stmt 0 view .LVU315
 1947 004a 00F01F06 		and	r6, r0, #31
 1948 004e 0124     		movs	r4, #1
 1949 0050 B440     		lsls	r4, r4, r6
 1950 0052 2143     		orrs	r1, r1, r4
 1951 0054 5951     		str	r1, [r3, r5]
 1952 0056 E0E7     		b	.L176
 1953              	.L177:
 969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****      (uint32_t)(3 << ((EXTI_Line*2) & 0x1F)), (uint32_t)(EXTI_ClearSrc << ((EXTI_Line*2) & 0x1F))) 
 1954              		.loc 1 969 7 is_stmt 1 view .LVU316
 1955 0058 20F01F05 		bic	r5, r0, #31
 1956 005c 084C     		ldr	r4, .L180+8
 1957 005e 2B59     		ldr	r3, [r5, r4]
 1958 0060 4000     		lsls	r0, r0, #1
 1959              	.LVL68:
 969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c ****      (uint32_t)(3 << ((EXTI_Line*2) & 0x1F)), (uint32_t)(EXTI_ClearSrc << ((EXTI_Line*2) & 0x1F))) 
 1960              		.loc 1 969 7 is_stmt 0 view .LVU317
 1961 0062 00F01E00 		and	r0, r0, #30
ARM GAS  /tmp/ccEZ6zfz.s 			page 67


 1962 0066 0321     		movs	r1, #3
 1963 0068 8140     		lsls	r1, r1, r0
 1964 006a 23EA0103 		bic	r3, r3, r1
 1965 006e 02FA00F0 		lsl	r0, r2, r0
 1966 0072 0343     		orrs	r3, r3, r0
 1967 0074 2B51     		str	r3, [r5, r4]
 1968              		.loc 1 973 1 view .LVU318
 1969 0076 E2E7     		b	.L174
 1970              	.L181:
 1971              		.align	2
 1972              	.L180:
 1973 0078 0C000058 		.word	1476395020
 1974 007c 10000058 		.word	1476395024
 1975 0080 14000058 		.word	1476395028
 1976              		.cfi_endproc
 1977              	.LFE185:
 1979              		.section	.bss.uwTick,"aw",%nobits
 1980              		.align	2
 1981              		.set	.LANCHOR2,. + 0
 1984              	uwTick:
 1985 0000 00000000 		.space	4
 1986              		.section	.data.uwTickFreq,"aw"
 1987              		.set	.LANCHOR0,. + 0
 1990              	uwTickFreq:
 1991 0000 01       		.byte	1
 1992              		.section	.data.uwTickPrio,"aw"
 1993              		.align	2
 1994              		.set	.LANCHOR1,. + 0
 1997              	uwTickPrio:
 1998 0000 10000000 		.word	16
 1999              		.text
 2000              	.Letext0:
 2001              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2002              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2003              		.file 5 "Drivers/CMSIS/Include/core_cm7.h"
 2004              		.file 6 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 2005              		.file 7 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h743xx.h"
 2006              		.file 8 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h7xx.h"
 2007              		.file 9 "/usr/arm-none-eabi/include/sys/lock.h"
 2008              		.file 10 "/usr/arm-none-eabi/include/sys/_types.h"
 2009              		.file 11 "/usr/lib/gcc/arm-none-eabi/8.2.0/include/stddef.h"
 2010              		.file 12 "/usr/arm-none-eabi/include/sys/reent.h"
 2011              		.file 13 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 2012              		.file 14 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
 2013              		.file 15 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_cortex.h"
ARM GAS  /tmp/ccEZ6zfz.s 			page 68


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32h7xx_hal.c
     /tmp/ccEZ6zfz.s:17     .text.HAL_MspInit:0000000000000000 $t
     /tmp/ccEZ6zfz.s:25     .text.HAL_MspInit:0000000000000000 HAL_MspInit
     /tmp/ccEZ6zfz.s:39     .text.HAL_MspDeInit:0000000000000000 $t
     /tmp/ccEZ6zfz.s:46     .text.HAL_MspDeInit:0000000000000000 HAL_MspDeInit
     /tmp/ccEZ6zfz.s:59     .text.HAL_DeInit:0000000000000000 $t
     /tmp/ccEZ6zfz.s:66     .text.HAL_DeInit:0000000000000000 HAL_DeInit
     /tmp/ccEZ6zfz.s:126    .text.HAL_DeInit:0000000000000058 $d
     /tmp/ccEZ6zfz.s:131    .text.HAL_InitTick:0000000000000000 $t
     /tmp/ccEZ6zfz.s:138    .text.HAL_InitTick:0000000000000000 HAL_InitTick
     /tmp/ccEZ6zfz.s:201    .text.HAL_InitTick:0000000000000040 $d
     /tmp/ccEZ6zfz.s:208    .text.HAL_Init:0000000000000000 $t
     /tmp/ccEZ6zfz.s:215    .text.HAL_Init:0000000000000000 HAL_Init
     /tmp/ccEZ6zfz.s:255    .text.HAL_IncTick:0000000000000000 $t
     /tmp/ccEZ6zfz.s:262    .text.HAL_IncTick:0000000000000000 HAL_IncTick
     /tmp/ccEZ6zfz.s:283    .text.HAL_IncTick:0000000000000010 $d
     /tmp/ccEZ6zfz.s:289    .text.HAL_GetTick:0000000000000000 $t
     /tmp/ccEZ6zfz.s:296    .text.HAL_GetTick:0000000000000000 HAL_GetTick
     /tmp/ccEZ6zfz.s:312    .text.HAL_GetTick:0000000000000008 $d
     /tmp/ccEZ6zfz.s:317    .text.HAL_GetTickPrio:0000000000000000 $t
     /tmp/ccEZ6zfz.s:324    .text.HAL_GetTickPrio:0000000000000000 HAL_GetTickPrio
     /tmp/ccEZ6zfz.s:339    .text.HAL_GetTickPrio:0000000000000008 $d
     /tmp/ccEZ6zfz.s:344    .text.HAL_SetTickFreq:0000000000000000 $t
     /tmp/ccEZ6zfz.s:351    .text.HAL_SetTickFreq:0000000000000000 HAL_SetTickFreq
     /tmp/ccEZ6zfz.s:400    .text.HAL_SetTickFreq:000000000000001c $d
     /tmp/ccEZ6zfz.s:406    .text.HAL_GetTickFreq:0000000000000000 $t
     /tmp/ccEZ6zfz.s:413    .text.HAL_GetTickFreq:0000000000000000 HAL_GetTickFreq
     /tmp/ccEZ6zfz.s:428    .text.HAL_GetTickFreq:0000000000000008 $d
     /tmp/ccEZ6zfz.s:433    .text.HAL_Delay:0000000000000000 $t
     /tmp/ccEZ6zfz.s:440    .text.HAL_Delay:0000000000000000 HAL_Delay
     /tmp/ccEZ6zfz.s:492    .text.HAL_Delay:0000000000000024 $d
     /tmp/ccEZ6zfz.s:497    .text.HAL_SuspendTick:0000000000000000 $t
     /tmp/ccEZ6zfz.s:504    .text.HAL_SuspendTick:0000000000000000 HAL_SuspendTick
     /tmp/ccEZ6zfz.s:522    .text.HAL_SuspendTick:000000000000000c $d
     /tmp/ccEZ6zfz.s:527    .text.HAL_ResumeTick:0000000000000000 $t
     /tmp/ccEZ6zfz.s:534    .text.HAL_ResumeTick:0000000000000000 HAL_ResumeTick
     /tmp/ccEZ6zfz.s:552    .text.HAL_ResumeTick:000000000000000c $d
     /tmp/ccEZ6zfz.s:557    .text.HAL_GetHalVersion:0000000000000000 $t
     /tmp/ccEZ6zfz.s:564    .text.HAL_GetHalVersion:0000000000000000 HAL_GetHalVersion
     /tmp/ccEZ6zfz.s:578    .text.HAL_GetHalVersion:0000000000000004 $d
     /tmp/ccEZ6zfz.s:583    .text.HAL_GetREVID:0000000000000000 $t
     /tmp/ccEZ6zfz.s:590    .text.HAL_GetREVID:0000000000000000 HAL_GetREVID
     /tmp/ccEZ6zfz.s:607    .text.HAL_GetREVID:0000000000000008 $d
     /tmp/ccEZ6zfz.s:612    .text.HAL_GetDEVID:0000000000000000 $t
     /tmp/ccEZ6zfz.s:619    .text.HAL_GetDEVID:0000000000000000 HAL_GetDEVID
     /tmp/ccEZ6zfz.s:636    .text.HAL_GetDEVID:000000000000000c $d
     /tmp/ccEZ6zfz.s:641    .text.HAL_SYSCFG_VREFBUF_VoltageScalingConfig:0000000000000000 $t
     /tmp/ccEZ6zfz.s:648    .text.HAL_SYSCFG_VREFBUF_VoltageScalingConfig:0000000000000000 HAL_SYSCFG_VREFBUF_VoltageScalingConfig
     /tmp/ccEZ6zfz.s:670    .text.HAL_SYSCFG_VREFBUF_VoltageScalingConfig:0000000000000010 $d
     /tmp/ccEZ6zfz.s:675    .text.HAL_SYSCFG_VREFBUF_HighImpedanceConfig:0000000000000000 $t
     /tmp/ccEZ6zfz.s:682    .text.HAL_SYSCFG_VREFBUF_HighImpedanceConfig:0000000000000000 HAL_SYSCFG_VREFBUF_HighImpedanceConfig
     /tmp/ccEZ6zfz.s:704    .text.HAL_SYSCFG_VREFBUF_HighImpedanceConfig:0000000000000010 $d
     /tmp/ccEZ6zfz.s:709    .text.HAL_SYSCFG_VREFBUF_TrimmingConfig:0000000000000000 $t
     /tmp/ccEZ6zfz.s:716    .text.HAL_SYSCFG_VREFBUF_TrimmingConfig:0000000000000000 HAL_SYSCFG_VREFBUF_TrimmingConfig
     /tmp/ccEZ6zfz.s:738    .text.HAL_SYSCFG_VREFBUF_TrimmingConfig:0000000000000010 $d
     /tmp/ccEZ6zfz.s:743    .text.HAL_SYSCFG_EnableVREFBUF:0000000000000000 $t
ARM GAS  /tmp/ccEZ6zfz.s 			page 69


     /tmp/ccEZ6zfz.s:750    .text.HAL_SYSCFG_EnableVREFBUF:0000000000000000 HAL_SYSCFG_EnableVREFBUF
     /tmp/ccEZ6zfz.s:805    .text.HAL_SYSCFG_EnableVREFBUF:0000000000000030 $d
     /tmp/ccEZ6zfz.s:810    .text.HAL_SYSCFG_DisableVREFBUF:0000000000000000 $t
     /tmp/ccEZ6zfz.s:817    .text.HAL_SYSCFG_DisableVREFBUF:0000000000000000 HAL_SYSCFG_DisableVREFBUF
     /tmp/ccEZ6zfz.s:834    .text.HAL_SYSCFG_DisableVREFBUF:000000000000000c $d
     /tmp/ccEZ6zfz.s:839    .text.HAL_SYSCFG_ETHInterfaceSelect:0000000000000000 $t
     /tmp/ccEZ6zfz.s:846    .text.HAL_SYSCFG_ETHInterfaceSelect:0000000000000000 HAL_SYSCFG_ETHInterfaceSelect
     /tmp/ccEZ6zfz.s:868    .text.HAL_SYSCFG_ETHInterfaceSelect:0000000000000010 $d
     /tmp/ccEZ6zfz.s:873    .text.HAL_SYSCFG_AnalogSwitchConfig:0000000000000000 $t
     /tmp/ccEZ6zfz.s:880    .text.HAL_SYSCFG_AnalogSwitchConfig:0000000000000000 HAL_SYSCFG_AnalogSwitchConfig
     /tmp/ccEZ6zfz.s:903    .text.HAL_SYSCFG_AnalogSwitchConfig:0000000000000010 $d
     /tmp/ccEZ6zfz.s:908    .text.HAL_SYSCFG_EnableBOOST:0000000000000000 $t
     /tmp/ccEZ6zfz.s:915    .text.HAL_SYSCFG_EnableBOOST:0000000000000000 HAL_SYSCFG_EnableBOOST
     /tmp/ccEZ6zfz.s:932    .text.HAL_SYSCFG_EnableBOOST:000000000000000c $d
     /tmp/ccEZ6zfz.s:937    .text.HAL_SYSCFG_DisableBOOST:0000000000000000 $t
     /tmp/ccEZ6zfz.s:944    .text.HAL_SYSCFG_DisableBOOST:0000000000000000 HAL_SYSCFG_DisableBOOST
     /tmp/ccEZ6zfz.s:961    .text.HAL_SYSCFG_DisableBOOST:000000000000000c $d
     /tmp/ccEZ6zfz.s:966    .text.HAL_SYSCFG_CM7BootAddConfig:0000000000000000 $t
     /tmp/ccEZ6zfz.s:973    .text.HAL_SYSCFG_CM7BootAddConfig:0000000000000000 HAL_SYSCFG_CM7BootAddConfig
     /tmp/ccEZ6zfz.s:1037   .text.HAL_SYSCFG_CM7BootAddConfig:0000000000000034 $d
     /tmp/ccEZ6zfz.s:1043   .text.HAL_EnableCompensationCell:0000000000000000 $t
     /tmp/ccEZ6zfz.s:1050   .text.HAL_EnableCompensationCell:0000000000000000 HAL_EnableCompensationCell
     /tmp/ccEZ6zfz.s:1067   .text.HAL_EnableCompensationCell:000000000000000c $d
     /tmp/ccEZ6zfz.s:1072   .text.HAL_DisableCompensationCell:0000000000000000 $t
     /tmp/ccEZ6zfz.s:1079   .text.HAL_DisableCompensationCell:0000000000000000 HAL_DisableCompensationCell
     /tmp/ccEZ6zfz.s:1096   .text.HAL_DisableCompensationCell:000000000000000c $d
     /tmp/ccEZ6zfz.s:1101   .text.HAL_SYSCFG_EnableIOSpeedOptimize:0000000000000000 $t
     /tmp/ccEZ6zfz.s:1108   .text.HAL_SYSCFG_EnableIOSpeedOptimize:0000000000000000 HAL_SYSCFG_EnableIOSpeedOptimize
     /tmp/ccEZ6zfz.s:1125   .text.HAL_SYSCFG_EnableIOSpeedOptimize:000000000000000c $d
     /tmp/ccEZ6zfz.s:1130   .text.HAL_SYSCFG_DisableIOSpeedOptimize:0000000000000000 $t
     /tmp/ccEZ6zfz.s:1137   .text.HAL_SYSCFG_DisableIOSpeedOptimize:0000000000000000 HAL_SYSCFG_DisableIOSpeedOptimize
     /tmp/ccEZ6zfz.s:1154   .text.HAL_SYSCFG_DisableIOSpeedOptimize:000000000000000c $d
     /tmp/ccEZ6zfz.s:1159   .text.HAL_SYSCFG_CompensationCodeSelect:0000000000000000 $t
     /tmp/ccEZ6zfz.s:1166   .text.HAL_SYSCFG_CompensationCodeSelect:0000000000000000 HAL_SYSCFG_CompensationCodeSelect
     /tmp/ccEZ6zfz.s:1188   .text.HAL_SYSCFG_CompensationCodeSelect:0000000000000010 $d
     /tmp/ccEZ6zfz.s:1193   .text.HAL_SYSCFG_CompensationCodeConfig:0000000000000000 $t
     /tmp/ccEZ6zfz.s:1200   .text.HAL_SYSCFG_CompensationCodeConfig:0000000000000000 HAL_SYSCFG_CompensationCodeConfig
     /tmp/ccEZ6zfz.s:1224   .text.HAL_SYSCFG_CompensationCodeConfig:0000000000000014 $d
     /tmp/ccEZ6zfz.s:1229   .text.HAL_DBGMCU_EnableDBGSleepMode:0000000000000000 $t
     /tmp/ccEZ6zfz.s:1236   .text.HAL_DBGMCU_EnableDBGSleepMode:0000000000000000 HAL_DBGMCU_EnableDBGSleepMode
     /tmp/ccEZ6zfz.s:1253   .text.HAL_DBGMCU_EnableDBGSleepMode:000000000000000c $d
     /tmp/ccEZ6zfz.s:1258   .text.HAL_DBGMCU_DisableDBGSleepMode:0000000000000000 $t
     /tmp/ccEZ6zfz.s:1265   .text.HAL_DBGMCU_DisableDBGSleepMode:0000000000000000 HAL_DBGMCU_DisableDBGSleepMode
     /tmp/ccEZ6zfz.s:1282   .text.HAL_DBGMCU_DisableDBGSleepMode:000000000000000c $d
     /tmp/ccEZ6zfz.s:1287   .text.HAL_DBGMCU_EnableDBGStopMode:0000000000000000 $t
     /tmp/ccEZ6zfz.s:1294   .text.HAL_DBGMCU_EnableDBGStopMode:0000000000000000 HAL_DBGMCU_EnableDBGStopMode
     /tmp/ccEZ6zfz.s:1311   .text.HAL_DBGMCU_EnableDBGStopMode:000000000000000c $d
     /tmp/ccEZ6zfz.s:1316   .text.HAL_DBGMCU_DisableDBGStopMode:0000000000000000 $t
     /tmp/ccEZ6zfz.s:1323   .text.HAL_DBGMCU_DisableDBGStopMode:0000000000000000 HAL_DBGMCU_DisableDBGStopMode
     /tmp/ccEZ6zfz.s:1340   .text.HAL_DBGMCU_DisableDBGStopMode:000000000000000c $d
     /tmp/ccEZ6zfz.s:1345   .text.HAL_DBGMCU_EnableDBGStandbyMode:0000000000000000 $t
     /tmp/ccEZ6zfz.s:1352   .text.HAL_DBGMCU_EnableDBGStandbyMode:0000000000000000 HAL_DBGMCU_EnableDBGStandbyMode
     /tmp/ccEZ6zfz.s:1369   .text.HAL_DBGMCU_EnableDBGStandbyMode:000000000000000c $d
     /tmp/ccEZ6zfz.s:1374   .text.HAL_DBGMCU_DisableDBGStandbyMode:0000000000000000 $t
     /tmp/ccEZ6zfz.s:1381   .text.HAL_DBGMCU_DisableDBGStandbyMode:0000000000000000 HAL_DBGMCU_DisableDBGStandbyMode
     /tmp/ccEZ6zfz.s:1398   .text.HAL_DBGMCU_DisableDBGStandbyMode:000000000000000c $d
     /tmp/ccEZ6zfz.s:1403   .text.HAL_EnableDomain3DBGStopMode:0000000000000000 $t
ARM GAS  /tmp/ccEZ6zfz.s 			page 70


     /tmp/ccEZ6zfz.s:1410   .text.HAL_EnableDomain3DBGStopMode:0000000000000000 HAL_EnableDomain3DBGStopMode
     /tmp/ccEZ6zfz.s:1427   .text.HAL_EnableDomain3DBGStopMode:000000000000000c $d
     /tmp/ccEZ6zfz.s:1432   .text.HAL_DisableDomain3DBGStopMode:0000000000000000 $t
     /tmp/ccEZ6zfz.s:1439   .text.HAL_DisableDomain3DBGStopMode:0000000000000000 HAL_DisableDomain3DBGStopMode
     /tmp/ccEZ6zfz.s:1456   .text.HAL_DisableDomain3DBGStopMode:000000000000000c $d
     /tmp/ccEZ6zfz.s:1461   .text.HAL_EnableDomain3DBGStandbyMode:0000000000000000 $t
     /tmp/ccEZ6zfz.s:1468   .text.HAL_EnableDomain3DBGStandbyMode:0000000000000000 HAL_EnableDomain3DBGStandbyMode
     /tmp/ccEZ6zfz.s:1485   .text.HAL_EnableDomain3DBGStandbyMode:000000000000000c $d
     /tmp/ccEZ6zfz.s:1490   .text.HAL_DisableDomain3DBGStandbyMode:0000000000000000 $t
     /tmp/ccEZ6zfz.s:1497   .text.HAL_DisableDomain3DBGStandbyMode:0000000000000000 HAL_DisableDomain3DBGStandbyMode
     /tmp/ccEZ6zfz.s:1514   .text.HAL_DisableDomain3DBGStandbyMode:000000000000000c $d
     /tmp/ccEZ6zfz.s:1519   .text.HAL_SetFMCMemorySwappingConfig:0000000000000000 $t
     /tmp/ccEZ6zfz.s:1526   .text.HAL_SetFMCMemorySwappingConfig:0000000000000000 HAL_SetFMCMemorySwappingConfig
     /tmp/ccEZ6zfz.s:1548   .text.HAL_SetFMCMemorySwappingConfig:0000000000000010 $d
     /tmp/ccEZ6zfz.s:1553   .text.HAL_GetFMCMemorySwappingConfig:0000000000000000 $t
     /tmp/ccEZ6zfz.s:1560   .text.HAL_GetFMCMemorySwappingConfig:0000000000000000 HAL_GetFMCMemorySwappingConfig
     /tmp/ccEZ6zfz.s:1577   .text.HAL_GetFMCMemorySwappingConfig:000000000000000c $d
     /tmp/ccEZ6zfz.s:1582   .text.HAL_EXTI_EdgeConfig:0000000000000000 $t
     /tmp/ccEZ6zfz.s:1589   .text.HAL_EXTI_EdgeConfig:0000000000000000 HAL_EXTI_EdgeConfig
     /tmp/ccEZ6zfz.s:1654   .text.HAL_EXTI_EdgeConfig:0000000000000044 $d
     /tmp/ccEZ6zfz.s:1659   .text.HAL_EXTI_GenerateSWInterrupt:0000000000000000 $t
     /tmp/ccEZ6zfz.s:1666   .text.HAL_EXTI_GenerateSWInterrupt:0000000000000000 HAL_EXTI_GenerateSWInterrupt
     /tmp/ccEZ6zfz.s:1700   .text.HAL_EXTI_GenerateSWInterrupt:0000000000000020 $d
     /tmp/ccEZ6zfz.s:1705   .text.HAL_EXTI_D1_ClearFlag:0000000000000000 $t
     /tmp/ccEZ6zfz.s:1712   .text.HAL_EXTI_D1_ClearFlag:0000000000000000 HAL_EXTI_D1_ClearFlag
     /tmp/ccEZ6zfz.s:1747   .text.HAL_EXTI_D1_ClearFlag:0000000000000020 $d
     /tmp/ccEZ6zfz.s:1752   .text.HAL_EXTI_D1_EventInputConfig:0000000000000000 $t
     /tmp/ccEZ6zfz.s:1759   .text.HAL_EXTI_D1_EventInputConfig:0000000000000000 HAL_EXTI_D1_EventInputConfig
     /tmp/ccEZ6zfz.s:1864   .text.HAL_EXTI_D1_EventInputConfig:0000000000000078 $d
     /tmp/ccEZ6zfz.s:1870   .text.HAL_EXTI_D3_EventInputConfig:0000000000000000 $t
     /tmp/ccEZ6zfz.s:1877   .text.HAL_EXTI_D3_EventInputConfig:0000000000000000 HAL_EXTI_D3_EventInputConfig
     /tmp/ccEZ6zfz.s:1973   .text.HAL_EXTI_D3_EventInputConfig:0000000000000078 $d
     /tmp/ccEZ6zfz.s:1980   .bss.uwTick:0000000000000000 $d
     /tmp/ccEZ6zfz.s:1984   .bss.uwTick:0000000000000000 uwTick
     /tmp/ccEZ6zfz.s:1990   .data.uwTickFreq:0000000000000000 uwTickFreq
     /tmp/ccEZ6zfz.s:1993   .data.uwTickPrio:0000000000000000 $d
     /tmp/ccEZ6zfz.s:1997   .data.uwTickPrio:0000000000000000 uwTickPrio

UNDEFINED SYMBOLS
HAL_SYSTICK_Config
HAL_NVIC_SetPriority
SystemCoreClock
HAL_NVIC_SetPriorityGrouping
